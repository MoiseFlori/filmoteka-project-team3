{"mappings":"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","sources":["src/js/api/genresApi.js","src/js/components/refs.js","src/js/components/pagination.js","src/js/api/moviesApi.js","src/js/api/config.js","src/js/components/movieList.js","src/js/app/searchPage.js","src/js/components/searchBar.js","src/js/components/trailer.js","src/js/app/localStorage.js","src/js/components/buttons.js","src/js/components/modal.js","src/index.js"],"sourcesContent":["import { BASE_URL, API_KEY } from './config.js';\n\nexport async function fetchGenres() {\n    const apiUrl = `${BASE_URL}/genre/movie/list?api_key=${API_KEY}&language=en-US`;\n  \n    try {\n      // console.log('Cerere la API-ul de genuri:', apiUrl);\n      const response = await fetch(apiUrl);\n      const data = await response.json();\n  \n      if (!data.genres || data.genres.length === 0) {\n        // console.error('Niciun gen găsit:', data);\n        return [];\n      }\n  \n      // console.log('Genuri obținute:', data.genres);\n      return data.genres;\n    } catch (error) {\n      // console.error('Eroare la API-ul de genuri:', error);\n      return [];\n    }\n  }\n  \n","const formRef = document.getElementById('search-form');\nconst inputRef = document.querySelector('.search__input');\nconst gallery = document.querySelector('.movies');\nconst headerRef = document.querySelector('.header');\nconst pageHomeRef = document.querySelector('.menu__link-home');\nconst pageLabraryRef = document.querySelector('.menu__link-library');\nconst modalBackdrop = document.querySelector('.modal__backdrop');\nconst modalBox = document.getElementById('modal');\nconst headerWarning = document.querySelector('.warning-notification');\nconst pagiCont = document.querySelector('.pagination-container');\nexport {\n  formRef,\n  inputRef,\n  gallery,\n  headerRef,\n  pageHomeRef,\n  pageLabraryRef,\n  modalBackdrop,\n  modalBox,\n  headerWarning,\n  pagiCont,\n};","// Generating and managing pagination functionality.\n\n// import { startPage } from '../start-page';\nimport { renderMovies } from './movieList';\nimport { gallery, inputRef } from './refs';\n// import { movieSearcher } from '../search';\n\nconst btn1Ref = document.querySelector('[data-index=\"1\"]');\nconst btn2Ref = document.querySelector('[data-index=\"2\"]');\nconst btn3Ref = document.querySelector('[data-index=\"3\"]');\nconst btn4Ref = document.querySelector('[data-index=\"4\"]');\nconst btn5Ref = document.querySelector('[data-index=\"5\"]');\nconst firstPageRef = document.querySelector('.first-button');\nconst lastPageRef = document.querySelector('.last-button');\nconst paginationRef = document.querySelector('.pagination-container');\nconst rightArrowRef = document.querySelector('.arrow-right');\nconst leftArrowRef = document.querySelector('.arrow-left');\nconst prevDotsRef = document.querySelector('#previous');\nconst afterDotsRef = document.querySelector('#after');\n\npaginationRef.addEventListener('click', onPaginationClick);\n\nlet currentPage = 1;\n\nlet btns = document.querySelectorAll('.pagination-button');\n\nprevDotsRef.hidden = true;\nleftArrowRef.hidden = true;\nfirstPageRef.hidden = true;\n\nfunction onPaginationClick(event) {\n  if (event.target.tagName === 'BUTTON') {\n    if (Number(event.target.textContent)) {\n      currentPage = Number(event.target.textContent);\n    }\n\n    prevDotsRef.hidden = true;\n    afterDotsRef.hidden = true;\n\n    if (event.target.classList.contains('pagination-button')) {\n      btns.forEach(el => el.classList.remove('pagination--current'));\n      event.target.classList.add('pagination--current');\n    }\n\n    if (event.target.classList.contains('arrow-right') && currentPage < 20) {\n      btns.forEach(el => el.classList.remove('pagination--current'));\n      btn1Ref.classList.add('pagination--current');\n      btn1Ref.textContent = Number(btn1Ref.textContent) + 5;\n      btn2Ref.textContent = Number(btn2Ref.textContent) + 5;\n      btn3Ref.textContent = Number(btn3Ref.textContent) + 5;\n      btn4Ref.textContent = Number(btn4Ref.textContent) + 5;\n      btn5Ref.textContent = Number(btn5Ref.textContent) + 5;\n      currentPage = btn1Ref.textContent;\n    }\n\n    if (event.target.classList.contains('arrow-left') && currentPage >= 5) {\n      btns.forEach(el => el.classList.remove('pagination--current'));\n      btn1Ref.textContent = Number(btn1Ref.textContent) - 5;\n      btn2Ref.textContent = Number(btn2Ref.textContent) - 5;\n      btn3Ref.textContent = Number(btn3Ref.textContent) - 5;\n      btn4Ref.textContent = Number(btn4Ref.textContent) - 5;\n      btn5Ref.textContent = Number(btn5Ref.textContent) - 5;\n      btn5Ref.classList.add('pagination--current');\n      currentPage = btn5Ref.textContent;\n    }\n\n    if (event.target.classList.contains('first-button')) {\n      btns.forEach(el => el.classList.remove('pagination--current'));\n      btn1Ref.textContent = 1;\n      btn2Ref.textContent = 2;\n      btn3Ref.textContent = 3;\n      btn4Ref.textContent = 4;\n      btn5Ref.textContent = 5;\n      btn1Ref.classList.add('pagination--current');\n      currentPage = btn1Ref.textContent;\n      leftArrowRef.hidden = true;\n      prevDotsRef.hidden = true;\n      firstPageRef.hidden = true;\n    }\n\n    if (event.target.classList.contains('last-button')) {\n      btns.forEach(el => el.classList.remove('pagination--current'));\n      btn1Ref.textContent = Number(lastPageRef.textContent) - 4;\n      btn2Ref.textContent = Number(lastPageRef.textContent) - 3;\n      btn3Ref.textContent = Number(lastPageRef.textContent) - 2;\n      btn4Ref.textContent = Number(lastPageRef.textContent) - 1;\n      btn5Ref.textContent = lastPageRef.textContent;\n      btn5Ref.classList.add('pagination--current');\n      currentPage = btn5Ref.textContent;\n      rightArrowRef.hidden = true;\n      afterDotsRef.hidden = true;\n      lastPageRef.hidden = true;\n    }\n\n    if (Number(currentPage) > 5) {\n      leftArrowRef.hidden = false;\n      prevDotsRef.hidden = false;\n      firstPageRef.hidden = false;\n    } else {\n      leftArrowRef.hidden = true;\n      prevDotsRef.hidden = true;\n      firstPageRef.hidden = true;\n    }\n\n    if (Number(currentPage) < 16) {\n      rightArrowRef.hidden = false;\n      afterDotsRef.hidden = false;\n      lastPageRef.hidden = false;\n    }\n\n    gallery.innerHTML = '';\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n\n    // if (inputRef?.value !== '') {\n    //   movieSearcher(inputRef.value, currentPage);\n    // } else {\n    //   startPage();\n    // }\n    renderMovies();\n  }\n}\n\nlet pageSize = 9;\n\nfunction defineResultsPerPage() {\n  if (window.innerWidth >= 1024) {\n    pageSize = 9;\n  } else if (window.innerWidth >= 768 && window.innerWidth < 1024) {\n    pageSize = 8;\n  } else if (window.innerWidth < 768) {\n    pageSize = 4;\n  }\n  return pageSize;\n}\n\nconst secret = {\n  r: 'goit',\n  e: 'go it',\n}\n\nexport { currentPage, defineResultsPerPage, secret };","// Funcții pentru obținerea datelor despre filme:\n// fetchPopularMovies()\n// fetchMovieById(id)\n// searchMovies(query, page)\n\n// Funcția pentru obținerea filmelor populare\nimport { BASE_URL, API_KEY } from './config.js';\nimport { fetchGenres } from './genresApi.js';\nimport { currentPage, defineResultsPerPage } from '../components/pagination';\n\nlet genresCache = [];\n\nasync function getGenres() {\n  if (genresCache.length === 0) {\n    genresCache = await fetchGenres();\n  }\n  return genresCache;\n}\n\nexport async function fetchPopularMovies() {\n  const apiUrl = `${BASE_URL}/movie/popular?api_key=${API_KEY}&language=en-US&page=${currentPage}`;\n\n  try {\n    // console.log('Fetching popular movies...');\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n\n    // console.log(data);\n\n    if (!data.results || data.results.length === 0) {\n      console.error('No popular movies found:', data);\n      return [];\n    }\n\n    const genres = await getGenres();\n    // console.log('Genres retrieved:', genres);\n\n    const moviesWithGenres = data.results.map(movie => ({\n      ...movie,\n      genre_names: movie.genre_ids.map(\n        id => genres.find(genre => genre.id === id)?.name || 'Unknown'\n      ),\n    }));\n\n    // console.log('Movies with genres:', moviesWithGenres);\n    return moviesWithGenres;\n  } catch (error) {\n    console.error('Error fetching popular movies:', error);\n    return [];\n  }\n}\n\nexport async function fetchMovieDetails(movieId) {\n  const MOVIE_DETAIL_URL = `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n\n  try {\n    console.log(`Fetching details for movie ID: ${movieId}`);\n    const response = await fetch(MOVIE_DETAIL_URL);\n    if (!response.ok) {\n      throw new Error('Failed to fetch movie details');\n    }\n    const data = await response.json();\n    console.log('Movie details fetched:', data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching movie details:', error);\n    throw error;\n  }\n}\n\nexport async function searchMovies(query, page) {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    query: query,\n    page: page,\n    language: 'en-US',\n    include_adult: false,\n  });\n\n  const apiUrl = `${BASE_URL}/search/movie?${searchParams}`;\n\n  try {\n    console.log(`searchMovies(${query},${page}) with URL: ${apiUrl}`);\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n\n    console.log(data);\n    if (data.success === false) {\n      console.error('The resource you requested could not be found.');\n      return false;\n    }\n\n    return data; // returnez doar data pentru că voi prelucra mai târziu currentPage și totalPages\n    // return data.results;\n  } catch (error) {\n    console.error('Error fetching movie by Id:', error);\n    return [];\n  }\n}\n// export async function fetchMovieById(id)\n\nexport async function fetchMovieById(id) {\n  const apiUrl = `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US&page=1`;\n\n  try {\n    console.log(`fetchMovieById(${id}) with URL: ${apiUrl}`);\n    const response = await fetch(apiUrl);\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch movie details');\n    }\n\n    const data = await response.json();\n\n    if (data.success === false) {\n      console.error('The resource you requested could not be found.');\n      return false;\n    }\n\n    return data;\n  } catch (error) {\n    console.error('Error fetching movie by Id:', error);\n    return [];\n  }\n}\n// export async function fetchMovieById(id)\n\nexport async function fetchTrailerUrl(movieId) {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/videos?api_key=${API_KEY}`\n    );\n    const data = await response.json();\n    const trailer = data.results.find(\n      video => video.type === 'Trailer' && video.site === 'YouTube'\n    );\n    return trailer ? `https://www.youtube.com/embed/${trailer.key}` : null;\n  } catch (error) {\n    console.error('Error fetching trailer URL:', error);\n    return null;\n  }\n}\n","// Configurațiile API-ului:\n// URL-ul de bază (BASE_URL)\n// Cheia API (API_KEY).\n\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_KEY = '21161239b69d8dd6ebeec5ac6086d760';\n","// Generating and displaying the list of movies.\n\nimport { fetchPopularMovies } from '../api/moviesApi'; // Importă funcția de API\nimport { currentPage, defineResultsPerPage } from '../components/pagination';\n\n\nexport function generateMovieHTML(movie) {\n  let ratingClass = 'movie__average--red';\n  if (movie.vote_average >= 7) ratingClass = 'movie__average--green';\n  else if (movie.vote_average >= 5) ratingClass = 'movie__average--orange';\n\n  const moviePoster = movie.poster_path\n    ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n    : './images/no-image-available.jpg';\n\n  const altText = movie.poster_path\n    ? `${movie.title} movie poster`\n    : `No poster available for ${movie.title}`;\n\n  if (typeof movie.genre_names === 'undefined') movie.genre_names = [];\n\n  let displayedGenres = movie.genre_names.slice(0, 2);\n  if (movie.genre_names.length > 2) {\n    displayedGenres.push('Other');\n  }\n\n  const genres = displayedGenres.join(', ');\n\n  return `\n    <li class=\"movie_list_item\" data-movie-id=\"${movie.id}\">\n      <div class=\"movie__cover-inner\">\n        <img \n          class=\"movie__cover\" \n          src=\"${moviePoster}\" \n          alt=\"${altText}\" \n        />\n      </div>\n      <div class=\"movie__cover--darkened\"></div>\n        <div class=\"movie-info\">\n          <h3 class=\"movie-title\">${movie.title}</h3>\n          <p class=\"movie-date\">${genres} | ${new Date(\n              movie.release_date\n            ).getFullYear()}</p>\n                  <div class=\"movie__average ${ratingClass}\">\n                    ${movie.vote_average.toFixed(1)}\n          </div>\n      </div>\n    </li>\n  `;\n}\n\n// Funcția pentru afișarea filmelor\nexport async function renderMovies() {\n  try {\n    // console.log('page', currentPage);\n    // console.log('Apelare la funcția renderMovies...');\n    const movies = await fetchPopularMovies();\n    const galleryElement = document.querySelector('.movies');\n\n    if (!movies || movies.length === 0) {\n      console.error('Niciun film pentru afișare.');\n      galleryElement.innerHTML = '<p>No movies found.</p>';\n      return;\n    }\n\n    const perPage = defineResultsPerPage();\n\n    const moviesHTML = movies.slice(0, perPage).map(generateMovieHTML).join('');\n    // console.log('HTML-ul generat pentru filme:', moviesHTML);\n    galleryElement.innerHTML = moviesHTML;\n  } catch (error) {\n    console.error('Eroare la afișarea filmelor:', error);\n    document.querySelector('.movies').innerHTML =\n      '<p>Error loading movies.</p>';\n  }\n}\n","// Gestionează funcționalitatea de căutare a filmelor și afișarea rezultatelor căutării\n// nclude logica pentru manipularea inputului utilizatorului în bara de căutare, utilizând componenta searchBar.js.\n// Realizează cereri către API pentru a obține rezultatele căutării pe baza cuvintelor cheie introduse de utilizator.\n// Afișează rezultatele folosind componenta movieList.js și oferă paginare pentru navigarea prin rezultate.\n// Gestionează erorile sau rezultatele goale pentru a îmbunătăți experiența utilizatorului.\n\n// console.log('Inside SearchPage.js');\nimport { generateMovieHTML } from '../components/movieList.js';\nimport { fetchMovieById } from '../api/moviesApi'; // Importă funcția de API\nimport { searchMovies } from '../api/moviesApi'; // Importă funcția de API\n\n\nfunction renderPageNumbers(query, currentPage, totalPages) {\n  console.log(` renderPageNumbers(${query}, ${currentPage}, ${totalPages})`);\n  \n  const items = [];\n  const pagination = document.querySelector('.pagination');  \n\n  pagination.innerHTML = '';\n\n  if (totalPages > 1) {\n    \n    const displayedPages = [];\n    if (currentPage - 2 >= 1)\n        displayedPages.push(currentPage - 2);\n\n    if (currentPage - 1 >= 1)\n        displayedPages.push(currentPage - 1);\n\n    displayedPages.push(currentPage);\n\n    if (currentPage + 1 <= totalPages)\n        displayedPages.push(currentPage + 1);\n\n    if (currentPage + 2 <= totalPages)\n        displayedPages.push(currentPage + 2);\n\n    if (displayedPages.length < 5) {\n\n        const last = Number(displayedPages.slice(-1));\n\n        for (let i = last + 1; i <= totalPages; i++)\n         {   displayedPages.push(i);\n                console.log(i);\n         }\n    }\n        \n\n            \n        \n        console.log(displayedPages);\n\n    for (const page of displayedPages) {\n      const item = document.createElement(\"button\");\n      item.type = \"button\";\n      item.value = page;\n      item.innerText = page;\n      item.dataset.query = encodeURIComponent(query);\n      \n      item.classList.add(\"page-btn\");  \n      if (page == currentPage)  \n        item.classList.add(\"active-page\"); \n\n      items.push(item);\n    }\n    // for\n\n    pagination.append(...items);\n\n    pagination.addEventListener('click', submitPageNumber);\n\n  }\n  // if (totalPages > 1)\n\n}\n// function renderPageNumbers(\n\nfunction scrollSmoothToTop() {\n  window.scrollTo({top: 0, behavior: 'smooth'});\n}\n\n\nfunction submitPageNumber(event) {\n\n  // opresc submit către server\n  event.preventDefault();\n  \n  scrollSmoothToTop();\n\n  // extrag informațiile de la buton\n  const query = event.target.dataset.query;\n  const pageNumber = event.target.value;\n\n  console.log(`Page number: ${pageNumber} ${query}`)\n\n  // afișez filmele pentru noile cerințe\n  renderSearchedMovies(query, pageNumber);\n\n}\n// function submitPageNumber(event) {\n\n\n\n// Filme în urma Search\nexport async function renderSearchedMovies(query, page) {\n \n    try {\n    console.log('Apelare la funcția renderSearchedMovies...');\n    const moviesData = await searchMovies(query, page);\n    const galleryElement = document.querySelector('.movies');\n\n    const movies = moviesData.results;\n    const currentPage = moviesData.page;\n    const totalPages = moviesData.total_pages;\n    console.log(moviesData);\n\n    if (!movies || movies.length === 0) {\n      console.error('Niciun film pentru afișare.');\n      galleryElement.innerHTML = '<p>No movies found.</p>';\n      return;\n    }\n\n    const moviesHTML = movies.map(generateMovieHTML).join('');\n    console.log('HTML-ul generat pentru filme:', moviesHTML);\n    galleryElement.innerHTML = moviesHTML;\n\n    // afișarea numărului de pagini\n    //renderPageNumbers(query, currentPage, totalPages);\n\n  } catch (error) {\n    console.error('Eroare la afișarea filmelor:', error);\n    document.querySelector('.movies').innerHTML =\n      '<p>Error loading movies.</p>';\n  }\n}\n\n\n\nexport async function search(id) {\n    try {\n        // console.log(`export async function search(id)...`);\n        const movie = await fetchMovieById(id);\n        \n        console.log(`...movie...`);\n        console.dir(movie);\n\n        const movieHtml = generateMovieHTML(movie)\n        console.log(movieHtml);\n        return movieHtml;\n\n    } catch (error) {\n        console.error('Eroare la afișarea filmului:', error);\n    }\n}\n","// Logic for the search bar (including input events)\n\nconsole.log('*** Loaded searchbar.js');\n\nconst searchText = document.querySelector('.search-field');\nconst searchButton = document.querySelector('.search-button');  \nconst pagination = document.querySelector('.pagination');  \n\nconsole.log(pagination);\n\nimport { renderSearchedMovies } from '../app/searchPage';\n\nsearchText.addEventListener('click', function (e) {\n\n    e.preventDefault();\n    const page = 1;\n    renderSearchedMovies(searchText.value, page)\n});\n\n\nsearchButton.addEventListener('click', function (e) {\n    e.preventDefault();\n    const page = 1;\n    renderSearchedMovies(searchText.value, page)\n});\n","export function initializeTrailerModal() {\n  const trailerModalWrapper = document.getElementById(\n    'trailer-modal-container'\n  );\n  const trailerBackdrop = document.getElementById('trailer-backdrop');\n  const trailerContent = document.getElementById('trailer-content');\n\n  function openTrailerModal(trailerUrl) {\n    // Adauga iframe-ul pentru trailer\n    trailerContent.innerHTML = `\n      <iframe \n        src=\"${trailerUrl}\" \n        frameborder=\"0\" \n        allow=\"autoplay; encrypted-media\" \n        allowfullscreen>\n      </iframe>`;\n    trailerModalWrapper.classList.add('open');\n  }\n\n  function closeTrailerModal() {\n    trailerContent.innerHTML = ''; // Elimina iframe-ul cand se inchide modal-ul\n    trailerModalWrapper.classList.remove('open');\n  }\n\n  trailerBackdrop.addEventListener('click', closeTrailerModal);\n  document.addEventListener('keydown', e => {\n    if (e.key === 'Escape' && trailerModalWrapper.classList.contains('open')) {\n      closeTrailerModal();\n    }\n  });\n\n  return openTrailerModal;\n}\n","export function getFromStorage(key) {\n  return JSON.parse(localStorage.getItem(key)) || [];\n}\n\nexport function isInStorage(key, id) {\n  const items = getFromStorage(key);\n  return items.some(item => item.id === id);\n}\n\nexport function toggleStorage(key, movie) {\n  let items = getFromStorage(key);\n\n  if (isInStorage(key, movie.id)) {\n    items = items.filter(item => item.id !== movie.id);\n  } else {\n    items.push(movie);\n  }\n\n  localStorage.setItem(key, JSON.stringify(items));\n}\n\nexport function saveToStorage(key, data) {\n  localStorage.setItem(key, JSON.stringify(data));\n}\n","// Managing the \"Add to Watch\" and \"Add to Queue\" buttons\nimport { toggleStorage, isInStorage } from '../app/localStorage';\n\nexport function setupButtons(movie) {\n  const watchedButton = document.getElementById('watched-button');\n  const queueButton = document.getElementById('queue-button');\n\n  watchedButton.textContent = isInStorage('watched', movie.id)\n    ? 'REMOVE FROM WATCHED'\n    : 'ADD TO WATCHED';\n\n  queueButton.textContent = isInStorage('queue', movie.id)\n    ? 'REMOVE FROM QUEUE'\n    : 'ADD TO QUEUE';\n\n  watchedButton.onclick = () => {\n    toggleStorage('watched', movie);\n    watchedButton.textContent = isInStorage('watched', movie.id)\n      ? 'REMOVE FROM WATCHED'\n      : 'ADD TO WATCHED';\n  };\n\n  queueButton.onclick = () => {\n    toggleStorage('queue', movie);\n    queueButton.textContent = isInStorage('queue', movie.id)\n      ? 'REMOVE FROM QUEUE'\n      : 'ADD TO QUEUE';\n  };\n}\n","import {\n  fetchPopularMovies,\n  fetchMovieDetails,\n  fetchTrailerUrl,\n} from '../api/moviesApi';\nimport { generateMovieHTML } from '../components/movieList';\nimport { initializeTrailerModal } from '../components/trailer';\nimport { setupButtons } from '../components/buttons';\n\nexport async function initializeModal() {\n  const movieList = document.querySelector('.movies');\n  const modalWrapper = document.querySelector('.modal-wrapper');\n  const backdrop = document.querySelector('.backdrop');\n  const posterSection = document.getElementById('poster-section');\n  const movieTitle = document.getElementById('movie-title');\n  const movieVotes = document.getElementById('movie-votes');\n  const moviePopularity = document.getElementById('movie-popularity');\n  const originalTitle = document.getElementById('original-title');\n  const movieGenre = document.getElementById('movie-genre');\n  const movieAbout = document.getElementById('movie-about');\n  const trailerButton = document.getElementById('trailer-button');\n\n  const openTrailerModal = initializeTrailerModal();\n\n  function renderMoviesModal(movies) {\n    movieList.innerHTML = '';\n    const moviesMarkup = movies\n      .map(movie => {\n        return generateMovieHTML(movie);\n      })\n      .join('');\n\n    movieList.innerHTML = moviesMarkup;\n  }\n\n  // adaugam listener pe parinte\n  movieList.addEventListener('click', event => {\n    const movieCard = event.target.closest('.movie_list_item');\n    if (movieCard) {\n      const movieId = movieCard.getAttribute('data-movie-id');\n      handleMovieDetails(movieId);\n    }\n  });\n\n  async function handleMovieDetails(movieId) {\n    try {\n      const movieDetails = await fetchMovieDetails(movieId);\n      populateModal(movieDetails);\n    } catch (error) {\n      console.error('Error fetching movie details:', error);\n    }\n  }\n\n  function populateModal(data) {\n    posterSection.style.backgroundImage = `url('https://image.tmdb.org/t/p/w500/${\n      data.poster_path || ''\n    }')`;\n\n    movieTitle.textContent = data.title || 'No Title';\n\n    let ratingClass = 'movie__average--red';\n    if (data.vote_average >= 7) ratingClass = 'movie__average--green';\n    else if (data.vote_average >= 5) ratingClass = 'movie__average--orange';\n\n    const modalMovieVotes = document.querySelector('#modal-movie-votes');\n    if (modalMovieVotes) {\n      modalMovieVotes.innerHTML = `\n    <span class=\"vote-average ${ratingClass}\">\n      ${data.vote_average?.toFixed(1) || 'N/A'}\n    </span>\n    <span class=\"vote-separator\">/</span>\n    <span class=\"vote-count\">\n      ${data.vote_count || 0}\n    </span>\n  `;\n    }\n\n    moviePopularity.textContent = data.popularity?.toFixed(1) || 'N/A';\n    originalTitle.textContent = data.original_title || 'N/A';\n    movieGenre.textContent =\n      data.genres?.map(g => g.name).join(', ') || 'Unknown';\n    movieAbout.textContent = data.overview || 'No description available.';\n\n    trailerButton.onclick = () => fetchTrailer(data.id);\n    setupButtons(data);\n    openModal();\n  }\n\n  async function fetchTrailer(movieId) {\n    try {\n      const trailerUrl = await fetchTrailerUrl(movieId);\n      if (trailerUrl) {\n        openTrailerModal(trailerUrl);\n      } else {\n        alert('Trailer not available.');\n      }\n    } catch (error) {\n      console.error('Error fetching trailer:', error);\n    }\n  }\n  function openModal() {\n    document.body.classList.add('modal-open');\n    modalWrapper.classList.add('open');\n\n    backdrop.addEventListener('click', closeModal);\n    document.addEventListener('keydown', handleKeydown);\n    modalWrapper.addEventListener('click', handleOutsideClick);\n  }\n\n  function closeModal() {\n    document.body.classList.remove('modal-open');\n    modalWrapper.classList.remove('open');\n\n    // eliminam listeners la inchiderea modalului\n    backdrop.removeEventListener('click', closeModal);\n    document.removeEventListener('keydown', handleKeydown);\n    modalWrapper.removeEventListener('click', handleOutsideClick);\n  }\n\n  function handleKeydown(e) {\n    if (e.key === 'Escape' && modalWrapper.classList.contains('open')) {\n      closeModal();\n    }\n  }\n\n  function handleOutsideClick(e) {\n    const modalContent = document.getElementById('movie-details');\n    if (!modalContent.contains(e.target)) {\n      closeModal();\n    }\n  }\n\n  const movies = await fetchPopularMovies();\n  renderMoviesModal(movies);\n}\n","import './sass/index.scss';\nimport './sass/_pagination.scss';\n\nimport './js/components/searchBar';\n\nimport { renderMovies } from './js/components/movieList.js';\nimport { initializeModal } from './js/components/modal.js';\nimport './js/components/pagination.js';\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // console.log('App initialized');\n  renderMovies();\n  initializeModal();\n});\n"],"names":["async","$cb5bb855f2146911$export$e95d448b93b2cdb","response","fetch","data","json","genres","length","error","document","getElementById","querySelector","$b5a1802b03d58e34$export$b21c1b4271bdbe93","$89f896eead6f17ea$var$btn1Ref","$89f896eead6f17ea$var$btn2Ref","$89f896eead6f17ea$var$btn3Ref","$89f896eead6f17ea$var$btn4Ref","$89f896eead6f17ea$var$btn5Ref","$89f896eead6f17ea$var$firstPageRef","$89f896eead6f17ea$var$lastPageRef","$89f896eead6f17ea$var$paginationRef","$89f896eead6f17ea$var$rightArrowRef","$89f896eead6f17ea$var$leftArrowRef","$89f896eead6f17ea$var$prevDotsRef","$89f896eead6f17ea$var$afterDotsRef","addEventListener","event","target","tagName","Number","textContent","$89f896eead6f17ea$export$385972cd6b54c3e1","hidden","classList","contains","$89f896eead6f17ea$var$btns","forEach","el","remove","add","innerHTML","window","scrollTo","top","behavior","$18703c3ad17f34d6$export$1a30573fde3dfc62","querySelectorAll","$89f896eead6f17ea$var$pageSize","$93295c8431c78407$var$genresCache","$93295c8431c78407$var$getGenres","$93295c8431c78407$export$225b489b0d997c20","apiUrl","results","console","map","movie","genre_names","genre_ids","id","find","genre","name","$93295c8431c78407$export$a199ce1860fbd5cd","movieId","MOVIE_DETAIL_URL","log","ok","Error","$93295c8431c78407$export$b0c4d3ac9887d994","query","page","URLSearchParams","api_key","language","include_adult","success","$93295c8431c78407$export$95d25a3e459db988","trailer","video","type","site","key","$18703c3ad17f34d6$export$53da6709e29add30","ratingClass","vote_average","moviePoster","poster_path","altText","title","displayedGenres","slice","push","join","Date","release_date","getFullYear","toFixed","movies","galleryElement","perPage","innerWidth","moviesHTML","$67c7bf5189e612b6$export$ed513bafb229402d","moviesData","total_pages","$7a61c8decd4d727f$var$searchText","$7a61c8decd4d727f$var$searchButton","$7a61c8decd4d727f$var$pagination","$1ba3e3127818fd45$export$710d652e87bebf6a","trailerModalWrapper","trailerBackdrop","trailerContent","closeTrailerModal","e","trailerUrl","$8e6b099802297ef3$export$e4c9b9bae9539063","JSON","parse","localStorage","getItem","$8e6b099802297ef3$export$35f3dfcec2dbf042","some","item","$8e6b099802297ef3$export$5894ad57f1a6e020","items","filter","setItem","stringify","$63e0eb7203c7b511$export$c47022e4403e80f6","watchedButton","queueButton","onclick","$65a0cd66e497f444$export$aa9b0c0080dbe389","movieList","modalWrapper","backdrop","posterSection","movieTitle","moviePopularity","originalTitle","movieGenre","movieAbout","trailerButton","openTrailerModal","closeModal","body","removeEventListener","handleKeydown","handleOutsideClick","movieCard","closest","style","backgroundImage","modalMovieVotes","vote_count","popularity","original_title","g","overview","alert","fetchTrailer","populateModal","handleMovieDetails","getAttribute","moviesMarkup","renderMoviesModal","preventDefault","value"],"version":3,"file":"index.5fdabba2.js.map"}