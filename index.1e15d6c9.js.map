{"mappings":"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","sources":["src/js/api/genresApi.js","src/js/api/moviesApi.js","src/js/components/movieList.js","src/js/components/modal.js","src/index.js"],"sourcesContent":["import { BASE_URL, API_KEY } from './config.js';\n\nexport async function fetchGenres() {\n    const apiUrl = `${BASE_URL}/genre/movie/list?api_key=${API_KEY}&language=en-US`;\n  \n    try {\n      console.log('Cerere la API-ul de genuri:', apiUrl);\n      const response = await fetch(apiUrl);\n      const data = await response.json();\n  \n      if (!data.genres || data.genres.length === 0) {\n        console.error('Niciun gen găsit:', data);\n        return [];\n      }\n  \n      console.log('Genuri obținute:', data.genres);\n      return data.genres;\n    } catch (error) {\n      console.error('Eroare la API-ul de genuri:', error);\n      return [];\n    }\n  }\n  \n","// Funcții pentru obținerea datelor despre filme:\n// fetchPopularMovies()\n// fetchMovieById(id)\n// searchMovies(query, page)\n\n// Funcția pentru obținerea filmelor populare\nimport { BASE_URL, API_KEY } from './config.js';\nimport { fetchGenres } from './genresApi.js';\n\nlet genresCache = [];\n\nasync function getGenres() {\n  if (genresCache.length === 0) {\n    genresCache = await fetchGenres();\n  }\n  return genresCache;\n}\n\nexport async function fetchPopularMovies() {\n  const apiUrl = `${BASE_URL}/movie/popular?api_key=${API_KEY}&language=en-US&page=1`;\n\n  try {\n    console.log('Fetching popular movies...');\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n\n    if (!data.results || data.results.length === 0) {\n      console.error('No popular movies found:', data);\n      return [];\n    }\n\n    const genres = await getGenres();\n    console.log('Genres retrieved:', genres);\n\n    const moviesWithGenres = data.results.map(movie => ({\n      ...movie,\n      genre_names: movie.genre_ids.map(\n        id => genres.find(genre => genre.id === id)?.name || 'Unknown'\n      ),\n    }));\n\n    console.log('Movies with genres:', moviesWithGenres);\n    return moviesWithGenres;\n  } catch (error) {\n    console.error('Error fetching popular movies:', error);\n    return [];\n  }\n}\n","// Generating and displaying the list of movies.\n\nimport { fetchPopularMovies } from '../api/moviesApi'; // Importă funcția de API\n\n// Funcția pentru generarea HTML-ului fiecărui film\nexport function generateMovieHTML(movie) {\n  let ratingClass = 'movie__average--red';\n  if (movie.vote_average >= 7) ratingClass = 'movie__average--green';\n  else if (movie.vote_average >= 5) ratingClass = 'movie__average--orange';\n\n  const moviePoster = movie.poster_path\n    ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n    : './images/no-image-available.jpg';\n\n  const altText = movie.poster_path\n    ? `${movie.title} movie poster`\n    : `No poster available for ${movie.title}`;\n\n  // Afișează maximum două genuri\n  let displayedGenres = movie.genre_names.slice(0, 2);\n  if (movie.genre_names.length > 2) {\n    displayedGenres.push('Other');\n  }\n\n  // Folosește displayedGenres în loc de movie.genre_names\n  const genres = displayedGenres.join(', ');\n\n  return `\n    <li class=\"movie_list_item\">\n      <div class=\"movie__cover-inner\">\n        <img \n          class=\"movie__cover\" \n          src=\"${moviePoster}\" \n          alt=\"${altText}\" \n        />\n        <div class=\"movie__cover--darkened\"></div>\n      </div>\n      <div class=\"movie-info\">\n        <h3 class=\"movie-title\">${movie.title}</h3>\n        <p class=\"movie-date\">${genres} | ${new Date(\n    movie.release_date\n  ).getFullYear()}</p>\n        <div class=\"movie__average ${ratingClass}\">\n          ${movie.vote_average.toFixed(1)}\n        </div>\n      </div>\n    </li>\n  `;\n}\n\n// Funcția pentru afișarea filmelor\nexport async function renderMovies() {\n  try {\n    console.log('Apelare la funcția renderMovies...');\n    const movies = await fetchPopularMovies();\n    const galleryElement = document.querySelector('.movies');\n\n    if (!movies || movies.length === 0) {\n      console.error('Niciun film pentru afișare.');\n      galleryElement.innerHTML = '<p>No movies found.</p>';\n      return;\n    }\n\n    const moviesHTML = movies.map(generateMovieHTML).join('');\n    console.log('HTML-ul generat pentru filme:', moviesHTML);\n    galleryElement.innerHTML = moviesHTML;\n  } catch (error) {\n    console.error('Eroare la afișarea filmelor:', error);\n    document.querySelector('.movies').innerHTML =\n      '<p>Error loading movies.</p>';\n  }\n}\n","export async function initializeModal() {\n  const movieList = document.querySelector('.movies');\n  const modalWrapper = document.querySelector('.modal-wrapper');\n  const backdrop = document.querySelector('.backdrop');\n  const posterSection = document.getElementById('poster-section');\n  const movieTitle = document.getElementById('movie-title');\n  const movieVotes = document.getElementById('movie-votes');\n  const moviePopularity = document.getElementById('movie-popularity');\n  const originalTitle = document.getElementById('original-title');\n  const movieGenre = document.getElementById('movie-genre');\n  const movieAbout = document.getElementById('movie-about');\n  const trailerButton = document.getElementById('trailer-button');\n\n  const API_KEY = '21161239b69d8dd6ebeec5ac6086d760';\n  const API_URL = 'https://api.themoviedb.org/3/movie/popular';\n  const GENRE_URL = 'https://api.themoviedb.org/3/genre/movie/list';\n\n  let genres = {};\n\n  async function fetchGenres() {\n    try {\n      const response = await fetch(`${GENRE_URL}?api_key=${API_KEY}`);\n      if (!response.ok) throw new Error('Failed to fetch genres');\n      const data = await response.json();\n      genres = data.genres.reduce((acc, genre) => {\n        acc[genre.id] = genre.name;\n        return acc;\n      }, {});\n      console.log('Genres fetched:', genres);\n    } catch (error) {\n      console.error('Error fetching genres:', error);\n    }\n  }\n\n  async function fetchMovies() {\n    try {\n      const response = await fetch(`${API_URL}?api_key=${API_KEY}`);\n      if (!response.ok) throw new Error('Failed to fetch movies');\n      const data = await response.json();\n      console.log('Movies fetched:', data.results);\n      renderMovies(data.results);\n    } catch (error) {\n      console.error('Error fetching movies:', error);\n    }\n  }\n\n  function renderMovies(movies) {\n    movieList.innerHTML = '';\n    movies.forEach((movie) => {\n      const movieCard = document.createElement('li');\n      movieCard.classList.add('movie_list_item');\n      movieCard.setAttribute('data-movie-id', movie.id);\n\n      const genreNames = movie.genre_ids.map((id) => genres[id] || 'Unknown').join(', ');\n\n      movieCard.innerHTML = `\n        <div class=\"movie__cover-inner\">\n          <img \n            class=\"movie__cover\" \n            src=\"https://image.tmdb.org/t/p/w500/${movie.poster_path}\" \n            alt=\"${movie.title} movie poster\" \n          />\n          <div class=\"movie__cover--darkened\"></div>\n        </div>\n        <div class=\"movie-info\">\n          <h3 class=\"movie-title\">${movie.title}</h3>\n          <p class=\"movie-date\">${genreNames} | ${movie.release_date || 'Unknown'}</p>\n          <div class=\"movie__average\">${movie.vote_average.toFixed(1)}</div>\n        </div>\n      `;\n\n      movieCard.addEventListener('click', () => {\n        console.log('Clicked movie card:', movie.id);\n        fetchMovieDetails(movie.id);\n      });\n      movieList.appendChild(movieCard);\n    });\n\n    console.log('Rendered movie cards:', document.querySelectorAll('.movie_list_item'));\n  }\n\n  async function fetchMovieDetails(movieId) {\n    console.log('Fetching details for movie ID:', movieId);\n    const MOVIE_DETAIL_URL = `https://api.themoviedb.org/3/movie/${movieId}`;\n    try {\n      const response = await fetch(`${MOVIE_DETAIL_URL}?api_key=${API_KEY}`);\n      if (!response.ok) throw new Error('Failed to fetch movie details');\n      const data = await response.json();\n      populateModal(data);\n    } catch (error) {\n      console.error('Error fetching movie details:', error);\n    }\n  }\n\n  function populateModal(data) {\n    console.log('Populating modal with data:', data);\n    posterSection.style.backgroundImage = `url('https://image.tmdb.org/t/p/w500/${data.poster_path}')`;\n    movieTitle.textContent = data.title;\n    movieVotes.textContent = `${data.vote_average} / ${data.vote_count}`;\n    moviePopularity.textContent = data.popularity.toFixed(1);\n    originalTitle.textContent = data.original_title;\n    movieGenre.textContent = data.genres.map((g) => g.name).join(', ');\n    movieAbout.textContent = data.overview;\n\n    trailerButton.onclick = () => fetchTrailer(data.id);\n    openModal();\n  }\n\n  async function fetchTrailer(movieId) {\n    console.log('Fetching trailer for movie ID:', movieId);\n    const TRAILER_URL = `https://api.themoviedb.org/3/movie/${movieId}/videos`;\n    try {\n      const response = await fetch(`${TRAILER_URL}?api_key=${API_KEY}`);\n      if (!response.ok) throw new Error('Failed to fetch trailer');\n      const data = await response.json();\n      const trailer = data.results.find((video) => video.type === 'Trailer' && video.site === 'YouTube');\n      if (trailer) {\n        window.open(`https://www.youtube.com/watch?v=${trailer.key}`, '_blank');\n      } else {\n        alert('Trailer not available.');\n      }\n    } catch (error) {\n      console.error('Error fetching trailer:', error);\n    }\n  }\n\n  function openModal() {\n    console.log('Opening modal...');\n    modalWrapper.classList.add('open');\n  }\n\n  function closeModal() {\n    console.log('Closing modal...');\n    modalWrapper.classList.remove('open');\n  }\n\n  backdrop.addEventListener('click', closeModal);\n\n  document.addEventListener('keydown', (e) => {\n    if (e.key === 'Escape' && modalWrapper.classList.contains('open')) {\n      closeModal();\n    }\n  });\n\n  await fetchGenres();\n  await fetchMovies();\n}\n","import './sass/index.scss';\n\n\n\nimport { renderMovies } from './js/components/movieList.js';\nimport { initializeModal } from './js/components/modal.js';\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('App initialized');\n  renderMovies();\n  initializeModal();\n});\n"],"names":["async","$cb5bb855f2146911$export$e95d448b93b2cdb","apiUrl","console","log","response","fetch","data","json","genres","length","error","$93295c8431c78407$var$genresCache","$93295c8431c78407$var$getGenres","$93295c8431c78407$export$225b489b0d997c20","results","moviesWithGenres","map","movie","genre_names","genre_ids","id","find","genre","name","$18703c3ad17f34d6$export$53da6709e29add30","ratingClass","vote_average","moviePoster","poster_path","altText","title","displayedGenres","slice","push","join","Date","release_date","getFullYear","toFixed","$18703c3ad17f34d6$export$1a30573fde3dfc62","movies","galleryElement","document","querySelector","innerHTML","moviesHTML","$65a0cd66e497f444$export$aa9b0c0080dbe389","movieList","modalWrapper","backdrop","posterSection","getElementById","movieTitle","movieVotes","moviePopularity","originalTitle","movieGenre","movieAbout","trailerButton","API_KEY","closeModal","classList","remove","addEventListener","e","key","contains","ok","Error","reduce","acc","fetchGenres","forEach","movieCard","createElement","add","setAttribute","genreNames","movieId","MOVIE_DETAIL_URL","style","backgroundImage","textContent","vote_count","popularity","original_title","g","overview","onclick","TRAILER_URL","trailer","video","type","site","window","open","alert","fetchTrailer","populateModal","fetchMovieDetails","appendChild","querySelectorAll","fetchMovies"],"version":3,"file":"index.1e15d6c9.js.map"}