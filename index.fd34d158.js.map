{"mappings":"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","sources":["src/js/api/genresApi.js","src/js/api/moviesApi.js","src/js/api/config.js","src/js/components/movieList.js","src/js/app/searchPage.js","src/js/components/searchBar.js","src/js/components/modal.js","src/index.js"],"sourcesContent":["import { BASE_URL, API_KEY } from './config.js';\n\nexport async function fetchGenres() {\n    const apiUrl = `${BASE_URL}/genre/movie/list?api_key=${API_KEY}&language=en-US`;\n  \n    try {\n      console.log('Cerere la API-ul de genuri:', apiUrl);\n      const response = await fetch(apiUrl);\n      const data = await response.json();\n  \n      if (!data.genres || data.genres.length === 0) {\n        console.error('Niciun gen găsit:', data);\n        return [];\n      }\n  \n      console.log('Genuri obținute:', data.genres);\n      return data.genres;\n    } catch (error) {\n      console.error('Eroare la API-ul de genuri:', error);\n      return [];\n    }\n  }\n  \n","// Funcții pentru obținerea datelor despre filme:\n// fetchPopularMovies()\n// fetchMovieById(id)\n// searchMovies(query, page)\n\n// Funcția pentru obținerea filmelor populare\nimport { BASE_URL, API_KEY } from './config.js';\nimport { fetchGenres } from './genresApi.js';\n\nlet genresCache = [];\n\nasync function getGenres() {\n  if (genresCache.length === 0) {\n    genresCache = await fetchGenres();\n  }\n  return genresCache;\n}\n\nexport async function fetchPopularMovies() {\n  const apiUrl = `${BASE_URL}/movie/popular?api_key=${API_KEY}&language=en-US&page=1`;\n\n  try {\n    console.log('Fetching popular movies...');\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n\n    if (!data.results || data.results.length === 0) {\n      console.error('No popular movies found:', data);\n      return [];\n    }\n\n    const genres = await getGenres();\n    console.log('Genres retrieved:', genres);\n\n    const moviesWithGenres = data.results.map(movie => ({\n      ...movie,\n      genre_names: movie.genre_ids.map(\n        id => genres.find(genre => genre.id === id)?.name || 'Unknown'\n      ),\n    }));\n\n    console.log('Movies with genres:', moviesWithGenres);\n    return moviesWithGenres;\n  } catch (error) {\n    console.error('Error fetching popular movies:', error);\n    return [];\n  }\n}\n\nexport async function fetchMovieDetails(movieId) {\n  const MOVIE_DETAIL_URL = `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n\n  try {\n    console.log(`Fetching details for movie ID: ${movieId}`);\n    const response = await fetch(MOVIE_DETAIL_URL);\n    if (!response.ok) {\n      throw new Error('Failed to fetch movie details');\n    }\n    const data = await response.json();\n    console.log('Movie details fetched:', data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching movie details:', error);\n    throw error;\n  }\n}\n\n\n\nexport async function searchMovies(query, page) {\n  \n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    query: query,\n    page: page,\n    language: 'en-US',\n    include_adult: false,\n  });\n\n  const apiUrl  = `${BASE_URL}/search/movie?${searchParams}`;\n\n  try {\n    console.log(`searchMovies(${query},${page}) with URL: ${apiUrl}`);\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n\n    console.log(data);\n    if (data.success === false) {\n      console.error('The resource you requested could not be found.');\n      return false;\n    }\n\n  return data;  // returnez doar data pentru că voi prelucra mai târziu currentPage și totalPages\n    // return data.results;\n   \n  } catch (error) {\n    console.error('Error fetching movie by Id:', error);\n    return [];\n  }\n}\n// export async function fetchMovieById(id) \n\n\n\n\nexport async function fetchMovieById(id) {\n  const apiUrl  = `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US&page=1`;\n\n  try {\n    console.log(`fetchMovieById(${id}) with URL: ${apiUrl}`);\n    const response = await fetch(apiUrl);\n    \n\tif (!response.ok) {\n      throw new Error('Failed to fetch movie details');\n    }\n\t\n\tconst data = await response.json();\n\n    if (data.success === false) {\n      console.error('The resource you requested could not be found.');\n      return false;\n    }\n\n    return data;\n   \n  } catch (error) {\n    console.error('Error fetching movie by Id:', error);\n    return [];\n  }\n}\n// export async function fetchMovieById(id) \n","// Configurațiile API-ului:\n// URL-ul de bază (BASE_URL)\n// Cheia API (API_KEY).\n\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_KEY = '21161239b69d8dd6ebeec5ac6086d760';\n","// Generating and displaying the list of movies.\n\nimport { fetchPopularMovies } from '../api/moviesApi'; // Importă funcția de API\n\n// Funcția pentru generarea HTML-ului fiecărui film\nexport function generateMovieHTML(movie) {\n  let ratingClass = 'movie__average--red';\n  if (movie.vote_average >= 7) ratingClass = 'movie__average--green';\n  else if (movie.vote_average >= 5) ratingClass = 'movie__average--orange';\n\n  const moviePoster = movie.poster_path\n    ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n    : './images/no-image-available.jpg';\n\n  const altText = movie.poster_path\n    ? `${movie.title} movie poster`\n    : `No poster available for ${movie.title}`;\n\n  // Afișează maximum două genuri\n    \n  console.log('movie.genre_names');\n  console.log(movie.genre_names);\n\n  if (typeof movie.genre_names === 'undefined')\n    movie.genre_names = [];\n\n  let displayedGenres = movie.genre_names.slice(0, 2);\n  if (movie.genre_names.length > 2) {\n    displayedGenres.push('Other');\n  }\n\n// Folosește displayedGenres în loc de movie.genre_names\nconst genres = displayedGenres.join(', ');\n\n  return `\n    <li class=\"movie_list_item\">\n      <div class=\"movie__cover-inner\">\n        <img \n          class=\"movie__cover\" \n          src=\"${moviePoster}\" \n          alt=\"${altText}\" \n        />\n        <div class=\"movie__cover--darkened\"></div>\n      </div>\n      <div class=\"movie-info\">\n        <h3 class=\"movie-title\">${movie.title}</h3>\n        <p class=\"movie-date\">${genres} | ${new Date(\n    movie.release_date\n  ).getFullYear()}</p>\n        <div class=\"movie__average ${ratingClass}\">\n          ${movie.vote_average.toFixed(1)}\n        </div>\n      </div>\n    </li>\n  `;\n}\n\n// Funcția pentru afișarea filmelor\nexport async function renderMovies() {\n  try {\n    console.log('Apelare la funcția renderMovies...');\n    const movies = await fetchPopularMovies();\n    const galleryElement = document.querySelector('.movies');\n\n    if (!movies || movies.length === 0) {\n      console.error('Niciun film pentru afișare.');\n      galleryElement.innerHTML = '<p>No movies found.</p>';\n      return;\n    }\n\n    const moviesHTML = movies.map(generateMovieHTML).join('');\n    console.log('HTML-ul generat pentru filme:', moviesHTML);\n    galleryElement.innerHTML = moviesHTML;\n  } catch (error) {\n    console.error('Eroare la afișarea filmelor:', error);\n    document.querySelector('.movies').innerHTML =\n      '<p>Error loading movies.</p>';\n  }\n}\n","// Gestionează funcționalitatea de căutare a filmelor și afișarea rezultatelor căutării\n// nclude logica pentru manipularea inputului utilizatorului în bara de căutare, utilizând componenta searchBar.js.\n// Realizează cereri către API pentru a obține rezultatele căutării pe baza cuvintelor cheie introduse de utilizator.\n// Afișează rezultatele folosind componenta movieList.js și oferă paginare pentru navigarea prin rezultate.\n// Gestionează erorile sau rezultatele goale pentru a îmbunătăți experiența utilizatorului.\n\n// console.log('Inside SearchPage.js');\nimport { generateMovieHTML } from '../components/movieList.js';\nimport { fetchMovieById } from '../api/moviesApi'; // Importă funcția de API\nimport { searchMovies } from '../api/moviesApi'; // Importă funcția de API\n\n\nfunction renderPageNumbers(query, currentPage, totalPages) {\n  console.log(` renderPageNumbers(${query}, ${currentPage}, ${totalPages})`);\n  \n  const items = [];\n  const pagination = document.querySelector('.pagination');  \n\n  pagination.innerHTML = '';\n\n  if (totalPages > 1) {\n    \n    const displayedPages = [];\n    if (currentPage - 2 >= 1)\n        displayedPages.push(currentPage - 2);\n\n    if (currentPage - 1 >= 1)\n        displayedPages.push(currentPage - 1);\n\n    displayedPages.push(currentPage);\n\n    if (currentPage + 1 <= totalPages)\n        displayedPages.push(currentPage + 1);\n\n    if (currentPage + 2 <= totalPages)\n        displayedPages.push(currentPage + 2);\n\n    if (displayedPages.length < 5) {\n\n        const last = Number(displayedPages.slice(-1));\n\n        for (let i = last + 1; i <= totalPages; i++)\n         {   displayedPages.push(i);\n                console.log(i);\n         }\n    }\n        \n\n            \n        \n        console.log(displayedPages);\n\n    for (const page of displayedPages) {\n      const item = document.createElement(\"button\");\n      item.type = \"button\";\n      item.value = page;\n      item.innerText = page;\n      item.dataset.query = encodeURIComponent(query);\n      \n      item.classList.add(\"page-btn\");  \n      if (page == currentPage)  \n        item.classList.add(\"active-page\"); \n\n      items.push(item);\n    }\n    // for\n\n    pagination.append(...items);\n\n    pagination.addEventListener('click', submitPageNumber);\n\n  }\n  // if (totalPages > 1)\n\n}\n// function renderPageNumbers(\n\nfunction scrollSmoothToTop() {\n  window.scrollTo({top: 0, behavior: 'smooth'});\n}\n\n\nfunction submitPageNumber(event) {\n\n  // opresc submit către server\n  event.preventDefault();\n  \n  scrollSmoothToTop();\n\n  // extrag informațiile de la buton\n  const query = event.target.dataset.query;\n  const pageNumber = event.target.value;\n\n  console.log(`Page number: ${pageNumber} ${query}`)\n\n  // afișez filmele pentru noile cerințe\n  renderSearchedMovies(query, pageNumber);\n\n}\n// function submitPageNumber(event) {\n\n\n\n// Filme în urma Search\nexport async function renderSearchedMovies(query, page) {\n \n    try {\n    console.log('Apelare la funcția renderSearchedMovies...');\n    const moviesData = await searchMovies(query, page);\n    const galleryElement = document.querySelector('.movies');\n\n    const movies = moviesData.results;\n    const currentPage = moviesData.page;\n    const totalPages = moviesData.total_pages;\n    console.log(moviesData);\n\n    if (!movies || movies.length === 0) {\n      console.error('Niciun film pentru afișare.');\n      galleryElement.innerHTML = '<p>No movies found.</p>';\n      return;\n    }\n\n    const moviesHTML = movies.map(generateMovieHTML).join('');\n    console.log('HTML-ul generat pentru filme:', moviesHTML);\n    galleryElement.innerHTML = moviesHTML;\n\n    // afișarea numărului de pagini\n    //renderPageNumbers(query, currentPage, totalPages);\n\n  } catch (error) {\n    console.error('Eroare la afișarea filmelor:', error);\n    document.querySelector('.movies').innerHTML =\n      '<p>Error loading movies.</p>';\n  }\n}\n\n\n\nexport async function search(id) {\n    try {\n        // console.log(`export async function search(id)...`);\n        const movie = await fetchMovieById(id);\n        \n        console.log(`...movie...`);\n        console.dir(movie);\n\n        const movieHtml = generateMovieHTML(movie)\n        console.log(movieHtml);\n        return movieHtml;\n\n    } catch (error) {\n        console.error('Eroare la afișarea filmului:', error);\n    }\n}\n","// Logic for the search bar (including input events)\n\nconsole.log('*** Loaded searchbar.js');\n\nconst searchText = document.querySelector('.search-field');\nconst searchButton = document.querySelector('.search-button');  \nconst pagination = document.querySelector('.pagination');  \n\nconsole.log(pagination);\n\nimport { renderSearchedMovies } from '../app/searchPage';\n\nsearchText.addEventListener('click', function (e) {\n\ne.preventDefault();\n\nconst page = 1;\nrenderSearchedMovies(searchText.value, page)\n\n});\n\n\nsearchButton.addEventListener('click', function (e) {\n\ne.preventDefault();\n\nconst page = 1;\nrenderSearchedMovies(searchText.value, page)\n\n});\n","import { fetchPopularMovies, fetchMovieDetails } from '../api/moviesApi';\nimport { generateMovieHTML } from '../components/movieList';\n\nexport async function initializeModal() {\n  const movieList = document.querySelector('.movies');\n  const modalWrapper = document.querySelector('.modal-wrapper');\n  const backdrop = document.querySelector('.backdrop');\n  const posterSection = document.getElementById('poster-section');\n  const movieTitle = document.getElementById('movie-title');\n  const movieVotes = document.getElementById('movie-votes');\n  const moviePopularity = document.getElementById('movie-popularity');\n  const originalTitle = document.getElementById('original-title');\n  const movieGenre = document.getElementById('movie-genre');\n  const movieAbout = document.getElementById('movie-about');\n  const trailerButton = document.getElementById('trailer-button');\n\n  function renderMoviesModal(movies) {\n    movieList.innerHTML = '';\n    movies.forEach(movie => {\n      const movieCard = document.createElement('li');\n      movieCard.classList.add('movie_list_item');\n      movieCard.setAttribute('data-movie-id', movie.id);\n      movieCard.innerHTML = generateMovieHTML(movie);\n\n      movieCard.addEventListener('click', () => {\n        console.log('Clicked movie card:', movie.id);\n        handleMovieDetails(movie.id);\n      });\n\n      movieList.appendChild(movieCard);\n    });\n  }\n\n  async function handleMovieDetails(movieId) {\n    try {\n      const movieDetails = await fetchMovieDetails(movieId);\n      populateModal(movieDetails);\n    } catch (error) {\n      console.error('Error fetching movie details:', error);\n    }\n  }\n\n  function populateModal(data) {\n    posterSection.style.backgroundImage = `url('https://image.tmdb.org/t/p/w500/${\n      data.poster_path || ''\n    }')`;\n    movieTitle.textContent = data.title || 'No Title';\n    movieVotes.textContent = `${data.vote_average?.toFixed(1) || 'N/A'} / ${\n      data.vote_count || 0\n    }`;\n    moviePopularity.textContent = data.popularity?.toFixed(1) || 'N/A';\n    originalTitle.textContent = data.original_title || 'N/A';\n    movieGenre.textContent =\n      data.genres?.map(g => g.name).join(', ') || 'Unknown';\n    movieAbout.textContent = data.overview || 'No description available.';\n\n    trailerButton.onclick = () => fetchTrailer(data.id);\n    openModal();\n  }\n\n  async function fetchTrailer(movieId) {\n    try {\n      const trailerUrl = await fetchTrailerUrl(movieId);\n      if (trailerUrl) {\n        window.open(trailerUrl, '_blank');\n      } else {\n        alert('Trailer not available.');\n      }\n    } catch (error) {\n      console.error('Error fetching trailer:', error);\n    }\n  }\n\n  function openModal() {\n    modalWrapper.classList.add('open');\n  }\n\n  function closeModal() {\n    modalWrapper.classList.remove('open');\n  }\n\n  backdrop.addEventListener('click', closeModal);\n  document.addEventListener('keydown', e => {\n    if (e.key === 'Escape' && modalWrapper.classList.contains('open')) {\n      closeModal();\n    }\n  });\n\n  const movies = await fetchPopularMovies();\n  renderMoviesModal(movies);\n}\n","import './sass/index.scss';\nimport './sass/_pagination.scss';\n\nimport './js/components/searchBar';\n\n\nimport { renderMovies } from './js/components/movieList.js';\nimport { initializeModal } from './js/components/modal.js';\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('App initialized');\n  renderMovies();\n  initializeModal();\n});\n"],"names":["async","$cb5bb855f2146911$export$e95d448b93b2cdb","apiUrl","console","log","response","fetch","data","json","genres","length","error","$93295c8431c78407$var$genresCache","$93295c8431c78407$var$getGenres","$93295c8431c78407$export$225b489b0d997c20","results","moviesWithGenres","map","movie","genre_names","genre_ids","id","find","genre","name","$93295c8431c78407$export$b0c4d3ac9887d994","query","page","URLSearchParams","api_key","language","include_adult","success","$18703c3ad17f34d6$export$53da6709e29add30","ratingClass","vote_average","moviePoster","poster_path","altText","title","displayedGenres","slice","push","join","Date","release_date","getFullYear","toFixed","$18703c3ad17f34d6$export$1a30573fde3dfc62","movies","galleryElement","document","querySelector","innerHTML","moviesHTML","$67c7bf5189e612b6$export$ed513bafb229402d","moviesData","total_pages","$7a61c8decd4d727f$var$searchText","$7a61c8decd4d727f$var$searchButton","$7a61c8decd4d727f$var$pagination","$65a0cd66e497f444$export$aa9b0c0080dbe389","movieList","modalWrapper","backdrop","posterSection","getElementById","movieTitle","movieVotes","moviePopularity","originalTitle","movieGenre","movieAbout","trailerButton","closeModal","classList","remove","addEventListener","e","key","contains","movies1","forEach","movieCard","createElement","add","setAttribute","movieId","movieDetails","MOVIE_DETAIL_URL","ok","Error","style","backgroundImage","textContent","vote_count","popularity","original_title","g","overview","onclick","trailerUrl","fetchTrailerUrl","window","open","alert","fetchTrailer","handleMovieDetails","appendChild","preventDefault","value"],"version":3,"file":"index.fd34d158.js.map"}