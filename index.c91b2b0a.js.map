{"mappings":"AAEOA,eAAeC,IAClB,MAAMC,EAAS,wGAEf,IACEC,QAAQC,IAAI,8BAA+BF,GAC3C,MAAMG,QAAiBC,MAAMJ,GACvBK,QAAaF,EAASG,OAE5B,OAAKD,EAAKE,QAAiC,IAAvBF,EAAKE,OAAOC,QAKhCP,QAAQC,IAAI,mBAAoBG,EAAKE,QAC9BF,EAAKE,SALVN,QAAQQ,MAAM,oBAAsBJ,GAC7B,G,CAKT,MAAOI,GAEP,OADAR,QAAQQ,MAAM,8BAA+BA,GACtC,E,ECVb,IAAIC,EAAc,GAElBZ,eAAea,IAIb,OAH2B,IAAvBD,EAAYF,SACdE,QAAoBX,KAEfW,C,CAGFZ,eAAec,IAGpB,IACEX,QAAQC,IAAI,8BACZ,MAAMC,QAAiBC,MAJV,6GAKPC,QAAaF,EAASG,OAE5B,IAAKD,EAAKQ,SAAmC,IAAxBR,EAAKQ,QAAQL,OAEhC,OADAP,QAAQQ,MAAM,2BAA4BJ,GACnC,GAGT,MAAME,QAAeI,IACrBV,QAAQC,IAAI,oBAAqBK,GAEjC,MAAMO,EAAmBT,EAAKQ,QAAQE,KAAIC,IAAU,IAC/CA,EACHC,YAAaD,EAAME,UAAUH,KAC3BI,GAAMZ,EAAOa,MAAKC,GAASA,EAAMF,KAAOA,KAAKG,MAAQ,gBAKzD,OADArB,QAAQC,IAAI,sBAAuBY,GAC5BA,C,CACP,MAAOL,GAEP,OADAR,QAAQQ,MAAM,iCAAkCA,GACzC,E,ECxCJ,SAASc,EAAkBP,GAChC,IAAIQ,EAAc,sBACdR,EAAMS,cAAgB,EAAGD,EAAc,wBAClCR,EAAMS,cAAgB,IAAGD,EAAc,0BAEhD,MAAME,EAAcV,EAAMW,YACtB,kCAAkCX,EAAMW,cACxC,kCAEEC,EAAUZ,EAAMW,YAClB,GAAGX,EAAMa,qBACT,2BAA2Bb,EAAMa,QAGlC,IAACC,EAAkBd,EAAMC,YAAYc,MAAM,EAAG,GAC7Cf,EAAMC,YAAYT,OAAS,GAC7BsB,EAAgBE,KAAK,SAIrB,MAAIzB,EAASuB,EAAgBG,KAAK,MAEpC,MAAO,8IAKQP,uBACAE,sJAKiBZ,EAAMa,6CACRtB,OAAY,IAAI2B,KAC5ClB,EAAMmB,cACNC,yDACiCZ,kBACzBR,EAAMS,aAAaY,QAAQ,iD,CAQhCvC,eAAewC,IACpB,IACErC,QAAQC,IAAI,sCACX,MAAKqC,QAAe3B,IACf4B,EAAiBC,SAASC,cAAc,WAE9C,IAAKH,GAA4B,IAAlBA,EAAO/B,OAGpB,OAFAP,QAAQQ,MAAM,oCACb+B,EAAcG,UAAY,2BAI7B,MAAMC,EAAaL,EAAOxB,IAAIQ,GAAmBU,KAAK,IACtDhC,QAAQC,IAAI,gCAAiC0C,GAC7CJ,EAAeG,UAAYC,C,CAC3B,MAAOnC,GACPR,QAAQQ,MAAM,+BAAgCA,GAC9CgC,SAASC,cAAc,WAAWC,UAChC,8B,EC/DNF,SAASI,iBAAiB,oBAAoB,KAC5C5C,QAAQC,IAAI,mBACZoC,GAAc","sources":["src/js/api/genresApi.js","src/js/api/moviesApi.js","src/js/components/movieList.js","src/index.js"],"sourcesContent":["import { BASE_URL, API_KEY } from './config.js';\n\nexport async function fetchGenres() {\n    const apiUrl = `${BASE_URL}/genre/movie/list?api_key=${API_KEY}&language=en-US`;\n  \n    try {\n      console.log('Cerere la API-ul de genuri:', apiUrl);\n      const response = await fetch(apiUrl);\n      const data = await response.json();\n  \n      if (!data.genres || data.genres.length === 0) {\n        console.error('Niciun gen găsit:', data);\n        return [];\n      }\n  \n      console.log('Genuri obținute:', data.genres);\n      return data.genres;\n    } catch (error) {\n      console.error('Eroare la API-ul de genuri:', error);\n      return [];\n    }\n  }\n  \n","// Funcții pentru obținerea datelor despre filme:\n// fetchPopularMovies()\n// fetchMovieById(id)\n// searchMovies(query, page)\n\n// Funcția pentru obținerea filmelor populare\nimport { BASE_URL, API_KEY } from './config.js';\nimport { fetchGenres } from './genresApi.js';\n\nlet genresCache = [];\n\nasync function getGenres() {\n  if (genresCache.length === 0) {\n    genresCache = await fetchGenres();\n  }\n  return genresCache;\n}\n\nexport async function fetchPopularMovies() {\n  const apiUrl = `${BASE_URL}/movie/popular?api_key=${API_KEY}&language=en-US&page=1`;\n\n  try {\n    console.log('Fetching popular movies...');\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n\n    if (!data.results || data.results.length === 0) {\n      console.error('No popular movies found:', data);\n      return [];\n    }\n\n    const genres = await getGenres();\n    console.log('Genres retrieved:', genres);\n\n    const moviesWithGenres = data.results.map(movie => ({\n      ...movie,\n      genre_names: movie.genre_ids.map(\n        id => genres.find(genre => genre.id === id)?.name || 'Unknown'\n      ),\n    }));\n\n    console.log('Movies with genres:', moviesWithGenres);\n    return moviesWithGenres;\n  } catch (error) {\n    console.error('Error fetching popular movies:', error);\n    return [];\n  }\n}\n","// Generating and displaying the list of movies.\n\nimport { fetchPopularMovies } from '../api/moviesApi'; // Importă funcția de API\n\n// Funcția pentru generarea HTML-ului fiecărui film\nexport function generateMovieHTML(movie) {\n  let ratingClass = 'movie__average--red';\n  if (movie.vote_average >= 7) ratingClass = 'movie__average--green';\n  else if (movie.vote_average >= 5) ratingClass = 'movie__average--orange';\n\n  const moviePoster = movie.poster_path\n    ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n    : './images/no-image-available.jpg';\n\n  const altText = movie.poster_path\n    ? `${movie.title} movie poster`\n    : `No poster available for ${movie.title}`;\n\n  // Afișează maximum două genuri\n  let displayedGenres = movie.genre_names.slice(0, 2);\n  if (movie.genre_names.length > 2) {\n    displayedGenres.push('Other');\n  }\n\n  // Folosește displayedGenres în loc de movie.genre_names\n  const genres = displayedGenres.join(', ');\n\n  return `\n    <li class=\"movie_list_item\">\n      <div class=\"movie__cover-inner\">\n        <img \n          class=\"movie__cover\" \n          src=\"${moviePoster}\" \n          alt=\"${altText}\" \n        />\n        <div class=\"movie__cover--darkened\"></div>\n      </div>\n      <div class=\"movie-info\">\n        <h3 class=\"movie-title\">${movie.title}</h3>\n        <p class=\"movie-date\">${genres} | ${new Date(\n    movie.release_date\n  ).getFullYear()}</p>\n        <div class=\"movie__average ${ratingClass}\">\n          ${movie.vote_average.toFixed(1)}\n        </div>\n      </div>\n    </li>\n  `;\n}\n\n// Funcția pentru afișarea filmelor\nexport async function renderMovies() {\n  try {\n    console.log('Apelare la funcția renderMovies...');\n    const movies = await fetchPopularMovies();\n    const galleryElement = document.querySelector('.movies');\n\n    if (!movies || movies.length === 0) {\n      console.error('Niciun film pentru afișare.');\n      galleryElement.innerHTML = '<p>No movies found.</p>';\n      return;\n    }\n\n    const moviesHTML = movies.map(generateMovieHTML).join('');\n    console.log('HTML-ul generat pentru filme:', moviesHTML);\n    galleryElement.innerHTML = moviesHTML;\n  } catch (error) {\n    console.error('Eroare la afișarea filmelor:', error);\n    document.querySelector('.movies').innerHTML =\n      '<p>Error loading movies.</p>';\n  }\n}\n","import './sass/index.scss';\n\n\n\nimport { renderMovies } from './js/components/movieList.js';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('App initialized');\n  renderMovies();\n});\n"],"names":["async","$cb5bb855f2146911$export$e95d448b93b2cdb","apiUrl","console","log","response","fetch","data","json","genres","length","error","$93295c8431c78407$var$genresCache","$93295c8431c78407$var$getGenres","$93295c8431c78407$export$225b489b0d997c20","results","moviesWithGenres","map","movie","genre_names","genre_ids","id","find","genre","name","$18703c3ad17f34d6$export$53da6709e29add30","ratingClass","vote_average","moviePoster","poster_path","altText","title","displayedGenres","slice","push","join","Date","release_date","getFullYear","toFixed","$18703c3ad17f34d6$export$1a30573fde3dfc62","movies","galleryElement","document","querySelector","innerHTML","moviesHTML","addEventListener"],"version":3,"file":"index.c91b2b0a.js.map"}