{"mappings":"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","sources":["src/js/api/genresApi.js","src/js/components/loader.js","src/js/components/pagination.js","src/js/api/moviesApi.js","src/js/api/config.js","src/js/components/refs.js","src/js/components/trailer.js","src/js/app/localStorage.js","src/js/components/libraryList.js","src/js/components/libraryTabs.js","src/js/app/myLibraryPage.js","src/js/components/buttons.js","src/js/components/modal.js","src/js/components/movieList.js","src/js/app/searchPage.js","src/js/components/searchBar.js","src/index.js"],"sourcesContent":["import { BASE_URL, API_KEY } from './config.js';\n\nlet genresCache = []; \n\nexport async function fetchGenres() {\n  const apiUrl = `${BASE_URL}/genre/movie/list?api_key=${API_KEY}&language=en-US`;\n\n  try {\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n\n    if (data.genres) {\n      genresCache = data.genres; \n    }\n\n    return genresCache;\n  } catch (error) {\n    console.error('Eroare la încărcarea genurilor:', error);\n    return [];\n  }\n}\n\nexport async function getGenres() {\n  if (genresCache.length === 0) {\n    await fetchGenres();\n  }\n  return genresCache;\n}\n","const loader = document.querySelector('.loader');\n\nexport function showLoader() {\n  loader.classList.add('show');\n  setTimeout(() => {\n    loader.classList.remove('show');\n  }, 1000);\n}\n\n\nconst searchForm = document.getElementById(\"search-form\");\nsearchForm.addEventListener('submit' , () => {\n    showLoader();\n});","import { renderMovies, renderSearchedMovies } from './movieList';\nimport { currentSearchQuery } from './searchBar';\nimport { showLoader } from  './loader.js';\n\nconst btn1Ref = document.querySelector('[data-index=\"1\"]');\nconst btn2Ref = document.querySelector('[data-index=\"2\"]');\nconst btn3Ref = document.querySelector('[data-index=\"3\"]');\nconst btn4Ref = document.querySelector('[data-index=\"4\"]');\nconst btn5Ref = document.querySelector('[data-index=\"5\"]');\nconst firstPageRef = document.querySelector('.first-button');\nconst lastPageRef = document.querySelector('.last-button');\nconst paginationRef = document.querySelector('.pagination-container');\nconst rightArrowRef = document.querySelector('.arrow-right');\nconst leftArrowRef = document.querySelector('.arrow-left');\nconst prevDotsRef = document.querySelector('#previous');\nconst afterDotsRef = document.querySelector('#after');\n\nlet currentPage = 1;\nlet totalPages = 20;\n\n// Initialize pagination\npaginationRef.addEventListener('click', onPaginationClick);\n\nfunction updatePageButtons(total) {\n  totalPages = Math.min(total || 20, 20);\n  \n  paginationRef.style.display = 'flex';\n  \n  const pageButtons = [btn1Ref, btn2Ref, btn3Ref, btn4Ref, btn5Ref];\n  pageButtons.forEach(btn => btn.hidden = true);\n  \n  // Show only the buttons needed\n  for (let i = 0; i < Math.min(totalPages, 5); i++) {\n    pageButtons[i].hidden = false;\n    pageButtons[i].textContent = i + 1;\n    pageButtons[i].classList.toggle('pagination--current', i + 1 === currentPage);\n  }\n\n  lastPageRef.textContent = totalPages;\n  \n  // Hide first button and dots if we're at the start or have few pages\n  firstPageRef.hidden = currentPage <= 3 || totalPages <= 5;\n  prevDotsRef.hidden = currentPage <= 3 || totalPages <= 5;\n  \n  // Hide last button and dots if we're at the end or have few pages\n  lastPageRef.hidden = currentPage >= totalPages - 2 || totalPages <= 5;\n  afterDotsRef.hidden = currentPage >= totalPages - 2 || totalPages <= 5;\n  \n  // Show/hide arrows based only on current position\n  leftArrowRef.hidden = currentPage <= 1;\n  rightArrowRef.hidden = currentPage >= totalPages;\n\n  // Adjust button numbers for when we're near the end\n  if (currentPage > 3 && totalPages > 5) {\n    let startPage = currentPage - 2;\n    if (startPage + 4 > totalPages) {\n      startPage = totalPages - 4;\n    }\n    pageButtons.forEach((btn, index) => {\n      if (!btn.hidden) {\n        btn.textContent = startPage + index;\n        btn.classList.toggle('pagination--current', startPage + index === currentPage);\n      }\n    });\n  }\n}\n\nasync function onPaginationClick(event) {\n  const target = event.target;\n\n  if (target.tagName === 'BUTTON') {\n    target.blur();\n    const prevPage = currentPage;\n\n    if (target.classList.contains('pagination-button') && target.dataset.index) {\n      currentPage = Number(target.textContent);\n    } else if (target.classList.contains('arrow-right') && currentPage < totalPages) {\n      currentPage += 1;\n    } else if (target.classList.contains('arrow-left') && currentPage > 1) {\n      currentPage -= 1;\n    } else if (target.classList.contains('first-button')) {\n      currentPage = 1;\n    } else if (target.classList.contains('last-button')) {\n      currentPage = totalPages;\n    }\n\n    if (prevPage !== currentPage) {\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n      \n      if (currentSearchQuery) {\n        await renderSearchedMovies(currentSearchQuery, currentPage);\n      } else {\n        await renderMovies(currentPage);\n      }\n    }\n  }\n  \n  showLoader();\n\n}\n\nfunction defineResultsPerPage() {\n  let pageSize = 20;\n  if (window.innerWidth >= 1024) {\n    pageSize = 20;\n  } else if (window.innerWidth >= 768 && window.innerWidth < 1024) {\n    pageSize = 20;\n  } else if (window.innerWidth < 768) {\n    pageSize = 20;\n  }\n  return pageSize;\n}\n\nwindow.addEventListener('resize', defineResultsPerPage);\n\nexport { \n  currentPage, \n  defineResultsPerPage, \n  updatePageButtons \n};","// Funcții pentru obținerea datelor despre filme:\n// fetchPopularMovies()\n// fetchMovieById(id)\n// searchMovies(query, page)\n\n// Funcția pentru obținerea filmelor populare\nimport { BASE_URL, API_KEY } from './config.js';\nimport { getGenres } from './genresApi.js';\nimport { currentPage } from '../components/pagination';\n\nexport async function fetchPopularMovies(page = currentPage) {\n  console.log('Fetching popular movies for page:', page);\n  const apiUrl = `${BASE_URL}/movie/popular?api_key=${API_KEY}&language=en-US&page=${page}`;\n\n  try {\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n\n    if (!data.results || data.results.length === 0) {\n      console.error('No popular movies found:', data);\n      return { results: [], total_pages: 0 };\n    }\n\n    const genres = await getGenres();\n    const moviesWithGenres = data.results.map(movie => ({\n      ...movie,\n      genre_names: movie.genre_ids.map(\n        id => genres.find(genre => genre.id === id)?.name || 'Unknown'\n      ),\n    }));\n\n    const limitedTotalPages = Math.min(data.total_pages, 20);\n\n    return {\n      results: moviesWithGenres,\n      total_pages: limitedTotalPages,\n    };\n  } catch (error) {\n    console.error('Error fetching popular movies:', error);\n    return { results: [], total_pages: 0 };\n  }\n}\n\nexport async function searchMovies(query, page = 1) {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    query: query,\n    page: page,\n    language: 'en-US',\n    include_adult: false,\n  });\n\n  const apiUrl = `${BASE_URL}/search/movie?${searchParams}`;\n\n  try {\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n\n    if (!data || !data.results) {\n      return { results: [], total_pages: 0 };\n    }\n\n    const genres = await getGenres();\n    const moviesWithGenres = data.results.map(movie => ({\n      ...movie,\n      genre_names:\n        movie.genre_ids?.map(\n          id => genres.find(genre => genre.id === id)?.name || 'Unknown'\n        ) || [],\n    }));\n\n    // Limit total pages to 20\n    const limitedTotalPages = Math.min(data.total_pages, 20);\n\n    return {\n      results: moviesWithGenres,\n      total_pages: limitedTotalPages,\n    };\n  } catch (error) {\n    console.error('Error fetching movies:', error);\n    return { results: [], total_pages: 0 };\n  }\n}\n\nexport async function fetchMovieDetails(movieId) {\n  const MOVIE_DETAIL_URL = `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n\n  try {\n    const response = await fetch(MOVIE_DETAIL_URL);\n    if (!response.ok) {\n      throw new Error('Failed to fetch movie details');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching movie details:', error);\n    throw error;\n  }\n}\n\nexport async function fetchMovieById(id) {\n  const apiUrl = `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`;\n\n  try {\n    const response = await fetch(apiUrl);\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch movie details');\n    }\n\n    const data = await response.json();\n\n    if (data.success === false) {\n      console.error('The resource you requested could not be found.');\n      return false;\n    }\n\n    return data;\n  } catch (error) {\n    console.error('Error fetching movie by Id:', error);\n    return null;\n  }\n}\n\nexport async function fetchTrailerUrl(movieId) {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/movie/${movieId}/videos?api_key=${API_KEY}`\n    );\n    const data = await response.json();\n    const trailer = data.results.find(\n      video => video.type === 'Trailer' && video.site === 'YouTube'\n    );\n    return trailer ? `https://www.youtube.com/embed/${trailer.key}` : null;\n  } catch (error) {\n    console.error('Error fetching trailer URL:', error);\n    return null;\n  }\n}\n","// Configurațiile API-ului:\n// URL-ul de bază (BASE_URL)\n// Cheia API (API_KEY).\n\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_KEY = '21161239b69d8dd6ebeec5ac6086d760';\n","const formRef = document.getElementById('search-form');\nconst inputRef = document.querySelector('.form-input');\nconst gallery = document.querySelector('.movies');\nconst headerRef = document.querySelector('.header');\nconst pageHomeRef = document.querySelector('.menu__link-home');\nconst pageLabraryRef = document.querySelector('.menu__link-library');\nconst modalBackdrop = document.querySelector('.modal__backdrop');\nconst modalBox = document.getElementById('modal');\nconst headerWarning = document.querySelector('.warning-notification');\nconst pagiCont = document.querySelector('.pagination-container');\nexport {\n  formRef,\n  inputRef,\n  gallery,\n  headerRef,\n  pageHomeRef,\n  pageLabraryRef,\n  modalBackdrop,\n  modalBox,\n  headerWarning,\n  pagiCont,\n};","import { showLoader } from  './loader.js';\n\nexport function initializeTrailerModal() {\n  const trailerModalWrapper = document.getElementById(\n    'trailer-modal-container'\n  );\n  const trailerBackdrop = document.getElementById('trailer-backdrop');\n  const trailerContent = document.getElementById('trailer-content');\n\n  function openTrailerModal(trailerUrl) {\n    // Adauga iframe-ul pentru trailer\n    trailerContent.innerHTML = `\n      <iframe \n        src=\"${trailerUrl}\" \n        frameborder=\"0\" \n        allow=\"autoplay; encrypted-media\" \n        allowfullscreen>\n      </iframe>`;\n    trailerModalWrapper.classList.add('open');\n\n    showLoader();\n  }\n\n  function closeTrailerModal() {\n    trailerContent.innerHTML = ''; // Elimina iframe-ul cand se inchide modal-ul\n    trailerModalWrapper.classList.remove('open');\n  }\n\n  trailerBackdrop.addEventListener('click', closeTrailerModal);\n  document.addEventListener('keydown', e => {\n    if (e.key === 'Escape' && trailerModalWrapper.classList.contains('open')) {\n      closeTrailerModal();\n    }\n  });\n\n  return openTrailerModal;\n}\n","import { getGenres } from '../api/genresApi';\n\nexport function getFromStorage(key) {\n  return JSON.parse(localStorage.getItem(key)) || [];\n}\n\nexport function isInStorage(key, id) {\n  const items = getFromStorage(key);\n  return items.some(item => item.id === id);\n}\n\nexport async function toggleStorage(key, movie) {\n  let items = getFromStorage(key);\n\n  if (isInStorage(key, movie.id)) {\n    items = items.filter(item => item.id !== movie.id);\n  } else {\n    // Obține lista de genuri\n    const genres = await getGenres();\n\n    // Atașează genurile la film\n    const movieWithGenres = {\n      ...movie,\n      genre_names:\n        movie.genre_ids?.map(\n          id => genres.find(genre => genre.id === id)?.name || 'Unknown Genre'\n        ) || [],\n    };\n\n    items.push(movieWithGenres);\n  }\n\n  localStorage.setItem(key, JSON.stringify(items));\n}\nexport function saveToStorage(key, data) {\n  localStorage.setItem(key, JSON.stringify(data));\n}\n","import { generateMovieHTML } from './movieList';\nimport { getGenres } from '../api/genresApi'; // Importăm funcția pentru obținerea genurilor\nimport { initializeModal } from './modal';\n\nexport default async function renderLibraryList(movies) {\n  const libraryContainer = document.querySelector('.library-list');\n  libraryContainer.innerHTML = '';\n\n  if (!movies || movies.length === 0) {\n    libraryContainer.innerHTML = '<p>No movies found.</p>';\n    return;\n  }\n\n  try {\n    const genres = await getGenres(); // Obținem lista de genuri\n\n    const moviesWithGenres = movies.map(movie => ({\n      ...movie,\n      genre_names: Array.isArray(movie.genre_ids)\n        ? movie.genre_ids.map(\n            id => genres.find(genre => genre.id === id)?.name || 'Unknown Genre'\n          )\n        : [],\n    }));\n\n    let movieItems = '';\n    moviesWithGenres.forEach(movie => {\n      movieItems += generateMovieHTML(movie);\n    });\n\n    libraryContainer.innerHTML = `<ul class=\"movies\">${movieItems}</ul>`;\n\n    libraryContainer.addEventListener('click', event => {\n      const movieItem = event.target.closest('.movie_list_item');\n      if (!movieItem) return;\n\n      const movieId = movieItem.dataset.movieId;\n\n      initializeModal(movieId);\n    });\n  } catch (error) {\n    console.error('Error loading genres for library movies:', error);\n    libraryContainer.innerHTML =\n      '<p>Error loading movies. Please try again later.</p>';\n  }\n}\n","// Managing tabs between \"Watched\" and \"Queue.\"\nimport { showLoader } from  './loader.js';\n\nexport default function initLibraryTabs({\n  onWatchedTabClick,\n  onQueueTabClick,\n}) {\n  const watchedBtn = document.querySelector('#watched-btn');\n  const queueBtn = document.querySelector('#queue-btn');\n\n  watchedBtn.addEventListener('click', () => {\n    watchedBtn.classList.add('library-btn-active');\n    queueBtn.classList.remove('library-btn-active');\n    onWatchedTabClick();\n    showLoader();\n  });\n\n  queueBtn.addEventListener('click', () => {\n    queueBtn.classList.add('library-btn-active');\n    watchedBtn.classList.remove('library-btn-active');\n    onQueueTabClick();\n    showLoader();\n  });\n}\n","// Implementează logica pentru pagina „My Libraries,” care permite utilizatorilor să gestioneze și să vizualizeze filmele salvate.\n// Afișează două liste separate: „Watched” și „Queue,” utilizând componenta libraryList.js.\n// Coordonează funcționalitatea de comutare între tab-urile „Watched” și „Queue,” folosind componenta libraryTabs.js.\n// Preia filmele salvate din localStorage sau dintr-o bază de date backend, utilizând serviciul storage.js.\n// Gestionează interacțiunile utilizatorilor, precum eliminarea unui film dintr-o listă sau deschiderea modalului pentru detaliile unui film.\n\nimport { getFromStorage } from '../app/localStorage';\nimport renderLibraryList from '../components/libraryList';\nimport initLibraryTabs from '../components/libraryTabs';\n\n\nexport default function initMyLibraryPage() {\n  const libraryButtonsContainer = document.querySelector('#library-buttons');\n  libraryButtonsContainer.style.display = 'block'; // Afișează butoanele din header\n\n  // Afișează filmele din \"WATCHED\" implicit\n  renderLibraryList(getFromStorage('watched'));\n\n  // Initializează tab-urile folosind funcționalitatea butoanelor din header\n  initLibraryTabs({\n    onWatchedTabClick: () => {\n      renderLibraryList(getFromStorage('watched'));\n    },\n    onQueueTabClick: () => {\n      renderLibraryList(getFromStorage('queue'));\n    },\n  });\n}\n","// Managing the \"Add to Watch\" and \"Add to Queue\" buttons\nimport { toggleStorage, isInStorage } from '../app/localStorage';\nimport initMyLibraryPage from '../app/myLibraryPage';\nimport { showLoader } from  './loader.js';\n\nconst libraryBtn = document.getElementById('library-btn');\nconst homeBtn = document.getElementById('home-btn');\nconst searchForm = document.getElementById('search-form');\nconst libraryButtons = document.getElementById('library-buttons');\nconst watchedButton = document.getElementById('watched-button');\nconst queueButton = document.getElementById('queue-button');\nconst mainGallery = document.querySelector('.gallery');\nconst libraryGallery = document.querySelector('#library-gallery');\n\nlet currentPage = 'home'; \n\nfunction isOnLibraryPage() {\n  return currentPage === 'library';\n}\nexport function toggleHeaderButtons() {\n  function resetActiveButtons() {\n    homeBtn.classList.remove('active');\n    libraryBtn.classList.remove('active');\n  }\n\n  function activateHome() {\n    currentPage = 'home'; \n    searchForm.style.display = 'block';\n    libraryButtons.style.display = 'none';\n\n    mainGallery.style.display = 'block';\n    libraryGallery.style.display = 'none';\n\n    resetActiveButtons(); \n    homeBtn.classList.add('active'); \n  }\n\n  function activateLibrary() {\n    currentPage = 'library'; \n    searchForm.style.display = 'none';\n    libraryButtons.style.display = 'flex';\n\n    mainGallery.style.display = 'none';\n    libraryGallery.style.display = 'block';\n\n    resetActiveButtons(); \n    libraryBtn.classList.add('active'); \n\n    watchedButton.classList.add('library-btn-active');\n    queueButton.classList.remove('library-btn-active');\n\n    initMyLibraryPage();\n  }\n\n  homeBtn.addEventListener('click', activateHome);\n  libraryBtn.addEventListener('click', activateLibrary);\n\n  activateHome(); \n}\n\nexport function setupButtons(movie) {\n  watchedButton.textContent = isInStorage('watched', movie.id)\n    ? 'REMOVE FROM WATCHED'\n    : 'ADD TO WATCHED';\n\n  queueButton.textContent = isInStorage('queue', movie.id)\n    ? 'REMOVE FROM QUEUE'\n    : 'ADD TO QUEUE';\n\n  watchedButton.onclick = () => {\n    toggleStorage('watched', movie);\n    watchedButton.textContent = isInStorage('watched', movie.id)\n      ? 'REMOVE FROM WATCHED'\n      : 'ADD TO WATCHED';\n\n    if (isOnLibraryPage()) {\n      initMyLibraryPage();\n      showUpdateMessage();\n    }\n  };\n\n  queueButton.onclick = () => {\n    toggleStorage('queue', movie);\n    queueButton.textContent = isInStorage('queue', movie.id)\n      ? 'REMOVE FROM QUEUE'\n      : 'ADD TO QUEUE';\n\n    if (isOnLibraryPage()) {\n      initMyLibraryPage();\n      showUpdateMessage();\n    }\n  };\n}\n\nfunction showUpdateMessage() {\n  const message = document.createElement('p');\n  message.textContent = 'Library updated!';\n  message.className = 'update-message';\n  document.querySelector('#library-gallery').prepend(message);\n\n  setTimeout(() => {\n    message.remove();\n  }, 2000);\n}\n","import {\n  fetchPopularMovies,\n  fetchMovieDetails,\n  fetchTrailerUrl,\n} from '../api/moviesApi';\nimport { generateMovieHTML } from '../components/movieList';\nimport { initializeTrailerModal } from '../components/trailer';\nimport { setupButtons } from '../components/buttons';\n\nexport async function initializeModal(movieId) {\n  const modalWrapper = document.querySelector('.modal-wrapper');\n  const backdrop = document.querySelector('.backdrop');\n  const posterSection = document.getElementById('poster-section');\n  const movieTitle = document.getElementById('movie-title');\n  const movieVotes = document.getElementById('movie-votes');\n  const moviePopularity = document.getElementById('movie-popularity');\n  const originalTitle = document.getElementById('original-title');\n  const movieGenre = document.getElementById('movie-genre');\n  const movieAbout = document.getElementById('movie-about');\n  const trailerButton = document.getElementById('trailer-button');\n\n  const openTrailerModal = initializeTrailerModal();\n\n  if (!movieId) {\n    console.error('No movie ID provided!');\n    return;\n  }\n\n  try {\n    const movieDetails = await fetchMovieDetails(movieId);\n    populateModal(movieDetails);\n    openModal();\n  } catch (error) {\n    console.error('Error fetching movie details:', error);\n  }\n\n  function populateModal(data) {\n    posterSection.style.backgroundImage = `url('https://image.tmdb.org/t/p/w500/${\n      data.poster_path || ''\n    }')`;\n\n    movieTitle.textContent = data.title || 'No Title';\n\n    let ratingClass = 'movie__average--red';\n    if (data.vote_average >= 7) ratingClass = 'movie__average--green';\n    else if (data.vote_average >= 5) ratingClass = 'movie__average--orange';\n\n    const modalMovieVotes = document.querySelector('#modal-movie-votes');\n    if (modalMovieVotes) {\n      modalMovieVotes.innerHTML = `\n        <span class=\"vote-average ${ratingClass}\">\n          ${data.vote_average?.toFixed(1) || 'N/A'}\n        </span>\n        <span class=\"vote-separator\">/</span>\n        <span class=\"vote-count\">\n          ${data.vote_count || 0}\n        </span>\n      `;\n    }\n\n    moviePopularity.textContent = data.popularity?.toFixed(1) || 'N/A';\n    originalTitle.textContent = data.original_title || 'N/A';\n    movieGenre.textContent =\n      data.genres?.map(g => g.name).join(', ') || 'Unknown';\n    movieAbout.textContent = data.overview || 'No description available.';\n\n    trailerButton.onclick = () => fetchTrailer(data.id);\n    setupButtons(data);\n  }\n\n  async function fetchTrailer(movieId) {\n    try {\n      const trailerUrl = await fetchTrailerUrl(movieId);\n      if (trailerUrl) {\n        openTrailerModal(trailerUrl);\n      } else {\n        alert('Trailer not available.');\n      }\n    } catch (error) {\n      console.error('Error fetching trailer:', error);\n    }\n  }\n\n  function openModal() {\n    document.body.classList.add('modal-open');\n    modalWrapper.classList.add('open');\n\n    backdrop.addEventListener('click', closeModal);\n    document.addEventListener('keydown', handleKeydown);\n    modalWrapper.addEventListener('click', handleOutsideClick);\n  }\n\n  function closeModal() {\n    document.body.classList.remove('modal-open');\n    modalWrapper.classList.remove('open');\n\n    backdrop.removeEventListener('click', closeModal);\n    document.removeEventListener('keydown', handleKeydown);\n    modalWrapper.removeEventListener('click', handleOutsideClick);\n  }\n\n  function handleKeydown(e) {\n    if (e.key === 'Escape' && modalWrapper.classList.contains('open')) {\n      closeModal();\n    }\n  }\n\n  function handleOutsideClick(e) {\n    const modalContent = document.getElementById('movie-details');\n    if (!modalContent.contains(e.target)) {\n      closeModal();\n    }\n  }\n}\n","import { searchMovies, fetchPopularMovies } from '../api/moviesApi';\nimport { updatePageButtons, currentPage } from './pagination';\nimport { currentSearchQuery } from './searchBar';\nimport { gallery } from './refs';\nimport { initializeModal } from '../components/modal';\nimport { showLoader } from  './loader.js';\n\nexport function generateMovieHTML(movie) {\n  let ratingClass = 'movie__average--red';\n  if (movie.vote_average >= 7) ratingClass = 'movie__average--green';\n  else if (movie.vote_average >= 5) ratingClass = 'movie__average--orange';\n\n  const moviePoster = movie.poster_path\n    ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n    : './images/no-image-available.jpg';\n\n  const altText = movie.poster_path\n    ? `${movie.title || ''} movie poster`\n    : 'No poster available';\n\n  const genresArray = movie.genre_names || [];\n  let displayedGenres = genresArray.slice(0, 2);\n  if (genresArray.length > 2) {\n    displayedGenres.push('Other');\n  }\n\n  const genres = genresArray.length > 0 ? displayedGenres.join(', ') : '';\n  const rating =\n    movie.vote_average !== undefined ? movie.vote_average.toFixed(1) : '';\n  const releaseYear = movie.release_date\n    ? new Date(movie.release_date).getFullYear()\n    : '';\n\n  return `\n    <li class=\"movie_list_item\" data-movie-id=\"${movie.id || ''}\">\n      <div class=\"movie__cover-inner\">\n        <img \n          class=\"movie__cover\" \n          src=\"${moviePoster}\" \n          alt=\"${altText}\" \n        />\n      </div>\n      <div class=\"movie__cover--darkened\"></div>\n      <div class=\"movie-info\">\n        ${movie.title ? `<h3 class=\"movie-title\">${movie.title}</h3>` : ''}\n        ${\n          genres || releaseYear\n            ? `<p class=\"movie-date\">${[genres, releaseYear]\n                .filter(Boolean)\n                .join(' | ')}</p>`\n            : ''\n        }\n        ${\n          rating\n            ? `<div class=\"movie__average ${ratingClass}\">${rating}</div>`\n            : ''\n        }\n      </div>\n    </li>\n  `;\n}\n\nfunction getMoviesPerPage() {\n  const width = window.innerWidth;\n  if (width >= 1024) return 18;\n  if (width >= 768) return 16;\n  return 20;\n}\n\nexport async function renderSearchedMovies(query, page) {\n  try {\n    const { results, total_pages } = await searchMovies(query, page);\n\n    if (!results || results.length === 0) {\n      gallery.innerHTML = '<p>No movies found.</p>';\n      updatePageButtons(0); // Hide pagination when no results\n      return;\n    }\n\n    const moviesPerPage = getMoviesPerPage();\n    const moviesToShow = results.slice(0, moviesPerPage);\n    const moviesHTML = moviesToShow.map(generateMovieHTML).join('');\n    gallery.innerHTML = moviesHTML;\n\n    // Update pagination with the actual number of pages from search results\n    updatePageButtons(total_pages);\n  } catch (error) {\n    console.error('Error displaying searched movies:', error);\n    gallery.innerHTML = '<p>Error loading movies.</p>';\n    updatePageButtons(0);\n  }\n}\nexport async function renderMovies(page = 1) {\n  console.log('Rendering movies for page:', page);\n  try {\n    const { results, total_pages } = await fetchPopularMovies(page);\n\n    if (!results || results.length === 0) {\n      console.warn('No movies found');\n      gallery.innerHTML = '<p>No movies found.</p>';\n      updatePageButtons(0);\n      return;\n    }\n\n    console.log('Movies fetched:', results.length);\n    const moviesPerPage = getMoviesPerPage();\n    const moviesToShow = results.slice(0, moviesPerPage);\n    const moviesHTML = moviesToShow.map(generateMovieHTML).join('');\n\n    if (gallery) {\n      gallery.innerHTML = moviesHTML;\n      updatePageButtons(total_pages);\n\n      gallery.addEventListener('click', event => {\n        const movieItem = event.target.closest('.movie_list_item');\n        if (!movieItem) return;\n\n        const movieId = movieItem.dataset.movieId;\n        if (movieId) {\n          console.log('Clicked movie ID:', movieId);\n          initializeModal(movieId);\n          showLoader();\n        } else {\n          console.error('Movie ID not found in clicked item');\n        }\n      });\n    } else {\n      console.error('Gallery element not found');\n    }\n  } catch (error) {\n    console.error('Error displaying movies:', error);\n    if (gallery) {\n      gallery.innerHTML = '<p>Error loading movies.</p>';\n    }\n    updatePageButtons(0);\n  }\n}\n\n// Add resize listener to handle responsive layout\nwindow.addEventListener('resize', () => {\n  if (gallery.children.length > 0) {\n    // Re-render current page when window is resized\n    if (currentSearchQuery) {\n      renderSearchedMovies(currentSearchQuery, currentPage);\n    } else {\n      renderMovies(currentPage);\n    }\n  }\n});\n","// Gestionează funcționalitatea de căutare a filmelor și afișarea rezultatelor căutării\n// nclude logica pentru manipularea inputului utilizatorului în bara de căutare, utilizând componenta searchBar.js.\n// Realizează cereri către API pentru a obține rezultatele căutării pe baza cuvintelor cheie introduse de utilizator.\n// Afișează rezultatele folosind componenta movieList.js și oferă paginare pentru navigarea prin rezultate.\n// Gestionează erorile sau rezultatele goale pentru a îmbunătăți experiența utilizatorului.\n\nimport { generateMovieHTML } from '../components/movieList.js';\nimport { getGenres } from '../api/genresApi';\nimport { searchMovies } from '../api/moviesApi';\n\n// filme gasite prin search\nexport async function renderSearchedMovies(query, page) {\n  const galleryElement = document.querySelector('.movies');\n  const errorElement = document.querySelector('#search-error');\n\n  try {\n    console.log('Apelare la funcția renderSearchedMovies...');\n    const moviesData = await searchMovies(query, page);\n\n    const movies = moviesData?.results || [];\n\n    if (!Array.isArray(movies) || movies.length === 0) {\n      console.warn('No movies found.');\n      errorElement.style.display = 'block';\n      galleryElement.innerHTML = `\n        <p class=\"error-message\" style=\"text-align: center; font-size: 18px; color: red;\">\n          No movies found. Please try a different search term.\n        </p>\n      `;\n      return;\n    }\n\n    const genres = await getGenres();\n\n    const moviesWithGenres = movies.map(movie => ({\n      ...movie,\n      genre_names: Array.isArray(movie.genre_ids)\n        ? movie.genre_ids.map(\n            id => genres.find(genre => genre.id === id)?.name || 'Unknown Genre'\n          )\n        : [],\n    }));\n\n    errorElement.style.display = 'none';\n\n    const moviesHTML = moviesWithGenres.map(generateMovieHTML).join('');\n    galleryElement.innerHTML = moviesHTML;\n  } catch (error) {\n    console.error('Eroare la afișarea filmelor:', error);\n    errorElement.style.display = 'block';\n    galleryElement.innerHTML = `\n      <p class=\"error-message\" style=\"text-align: center; font-size: 18px; color: red;\">\n        Error loading movies. Please try again later.\n      </p>\n    `;\n  }\n}\n","// Logic for the search bar (including input events)\nimport { renderSearchedMovies } from '../app/searchPage';\nimport { showLoader } from './loader';\n\nconst searchText = document.querySelector('.search');\nconst searchButton = document.querySelector('.search-button');\nconst loader = document.querySelector('.loader');\n\nexport let currentSearchQuery = ''; \n\n// Event listener pentru butonul de căutare\nsearchButton.addEventListener('click', function (e) {\n  e.preventDefault();\n  const page = 1;\n  const query = searchText.value.trim();\n\n  if (query === '') return;\n\n  currentSearchQuery = query; \n  showLoader();\n  renderSearchedMovies(query, page).finally(() => {\n    loader.classList.remove('show');\n  });\n\n  searchText.value = '';\n\n  showLoader();\n});\n\n// Event listener pentru tasta Enter\nsearchText.addEventListener('keydown', function (e) {\n  if (e.key === 'Enter') {\n    e.preventDefault();\n    const page = 1;\n    const query = searchText.value.trim();\n\n    if (query === '') return;\n\n    currentSearchQuery = query; \n    showLoader();\n    renderSearchedMovies(query, page).finally(() => {\n      loader.classList.remove('show');\n    });\n\n    searchText.value = '';\n  }\n});\n","import './sass/index.scss';\nimport './sass/_pagination.scss';\n\nimport './js/components/searchBar';\n\nimport './js/components/loader';\nimport { showLoader } from './js/components/loader.js';\n\nimport { renderMovies } from './js/components/movieList.js';\nimport './js/components/pagination.js';\nimport { toggleHeaderButtons } from './js/components/buttons.js';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  showLoader();\n  renderMovies();\n  toggleHeaderButtons();\n});\n"],"names":["$cb5bb855f2146911$var$genresCache","async","$cb5bb855f2146911$export$c5604fa8028da00","length","response","fetch","data","json","genres","error","console","$cb5bb855f2146911$export$e95d448b93b2cdb","$770740dca78365cc$var$loader","document","querySelector","$770740dca78365cc$export$56525cbb1fcd885c","classList","add","setTimeout","remove","getElementById","addEventListener","$89f896eead6f17ea$var$btn1Ref","$89f896eead6f17ea$var$btn2Ref","$89f896eead6f17ea$var$btn3Ref","$89f896eead6f17ea$var$btn4Ref","$89f896eead6f17ea$var$btn5Ref","$89f896eead6f17ea$var$firstPageRef","$89f896eead6f17ea$var$lastPageRef","$89f896eead6f17ea$var$paginationRef","$89f896eead6f17ea$var$rightArrowRef","$89f896eead6f17ea$var$leftArrowRef","$89f896eead6f17ea$var$prevDotsRef","$89f896eead6f17ea$var$afterDotsRef","$89f896eead6f17ea$export$385972cd6b54c3e1","$89f896eead6f17ea$var$totalPages","$89f896eead6f17ea$export$82fb4acf7de09014","total","Math","min","style","display","pageButtons","forEach","btn","hidden","i","textContent","toggle","startPage","index","$93295c8431c78407$export$225b489b0d997c20","page","log","apiUrl","results","total_pages","moviesWithGenres","map","movie","genre_names","genre_ids","id","find","genre","name","$93295c8431c78407$export$b0c4d3ac9887d994","query","URLSearchParams","api_key","language","include_adult","$93295c8431c78407$export$a199ce1860fbd5cd","movieId","MOVIE_DETAIL_URL","ok","Error","$93295c8431c78407$export$95d25a3e459db988","trailer","video","type","site","key","event","target","tagName","blur","prevPage","contains","dataset","Number","window","scrollTo","top","behavior","$7a61c8decd4d727f$export$a3e10a4909eb3219","$18703c3ad17f34d6$export$ed513bafb229402d","$18703c3ad17f34d6$export$1a30573fde3dfc62","pageSize","innerWidth","$b5a1802b03d58e34$export$b21c1b4271bdbe93","$1ba3e3127818fd45$export$710d652e87bebf6a","trailerModalWrapper","trailerBackdrop","trailerContent","closeTrailerModal","innerHTML","e","trailerUrl","$8e6b099802297ef3$export$e4c9b9bae9539063","JSON","parse","localStorage","getItem","$8e6b099802297ef3$export$35f3dfcec2dbf042","some","item","$8e6b099802297ef3$export$5894ad57f1a6e020","items","filter","movieWithGenres","push","setItem","stringify","$f0388fe0d259efd2$export$2e2bcd8739ae039","movies","libraryContainer","Array","isArray","movieItems","$18703c3ad17f34d6$export$53da6709e29add30","movieItem","closest","$65a0cd66e497f444$export$aa9b0c0080dbe389","$823326855ea10d22$export$2e2bcd8739ae039","onWatchedTabClick","onQueueTabClick","watchedBtn","queueBtn","$0d675c4e5416b878$export$2e2bcd8739ae039","$63e0eb7203c7b511$var$libraryBtn","$63e0eb7203c7b511$var$homeBtn","$63e0eb7203c7b511$var$searchForm","$63e0eb7203c7b511$var$libraryButtons","$63e0eb7203c7b511$var$watchedButton","$63e0eb7203c7b511$var$queueButton","$63e0eb7203c7b511$var$mainGallery","$63e0eb7203c7b511$var$libraryGallery","$63e0eb7203c7b511$var$currentPage","$63e0eb7203c7b511$var$isOnLibraryPage","$63e0eb7203c7b511$export$c13b0b1659cdb1bd","resetActiveButtons","activateHome","$63e0eb7203c7b511$export$c47022e4403e80f6","onclick","$63e0eb7203c7b511$var$showUpdateMessage","message","createElement","className","prepend","movieId1","modalWrapper","backdrop","posterSection","movieTitle","moviePopularity","originalTitle","movieGenre","movieAbout","trailerButton","openTrailerModal","backgroundImage","poster_path","title","ratingClass","vote_average","modalMovieVotes","toFixed","vote_count","popularity","original_title","g","join","overview","alert","fetchTrailer","populateModal","body","closeModal","handleKeydown","handleOutsideClick","error1","removeEventListener","moviePoster","altText","genresArray","displayedGenres","slice","rating","undefined","releaseYear","release_date","Date","getFullYear","Boolean","$18703c3ad17f34d6$var$getMoviesPerPage","width","moviesPerPage","moviesHTML","warn","$67c7bf5189e612b6$export$ed513bafb229402d","galleryElement","errorElement","children","$7a61c8decd4d727f$var$searchText","$7a61c8decd4d727f$var$searchButton","$7a61c8decd4d727f$var$loader","preventDefault","value","trim","finally"],"version":3,"file":"index.af904891.js.map"}